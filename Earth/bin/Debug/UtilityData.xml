<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilityData</name>
    </assembly>
    <members>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column)">
            <summary>
            Adds a JoinElement to the end of the source SQLElement which joins
            the specified table on the specified foreignKey to the preceding element's table.
            
            Uses each TableDefinition's TableDefinition.TableAlias
            
            Only use this if there will only be 1 instance of each table in the entire SQLElement.
            </summary>
            <param name="source"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column)">
            <summary>
            Only use this if the ForeignKey DOES NOT BELONG TO the TableToJoin (But rather it POINTS TO the TableToJoin)
            
            There should not be more than 1 instance of the table to which the ForeignKey column belongs.
            There CAN be more than 1 instance of the tableToJoin.
            </summary>
            <param name="source"></param>
            <param name="tableToJoin"></param>
            <param name="tableToJoinTableAlias"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.String)">
            <summary>
            Only use this if the ForeignKey BELONGS TO the TableToJoin (and it references a foreignColumn in a different table).
            
            There CAN be more than 1 instance of the table to which the ForeignKey column belongs (the TableToJoin).
            There should NOT be more than 1 instance of the table to which the ForeignKey points (the foreignColumn's Table).
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <param name="foreignColumnTableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column)">
            <summary>
            Adds a JoinElement to the end of the source SQLElement which joins
            the specified table on the specified foreignKey to the preceding element's table.
            
            Uses each TableDefinition's TableDefinition.TableAlias
            
            Only use this if there will only be 1 instance of each table in the entire SQLElement.
            </summary>
            <param name="source"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column)">
            <summary>
            Only use this if the ForeignKey DOES NOT BELONG TO the TableToJoin (But rather it POINTS TO the TableToJoin)
            
            There should not be more than 1 instance of the table to which the ForeignKey column belongs.
            There CAN be more than 1 instance of the tableToJoin.
            </summary>
            <param name="source"></param>
            <param name="tableToJoin"></param>
            <param name="tableToJoinTableAlias"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.String)">
            <summary>
            Only use this if the ForeignKey BELONGS TO the TableToJoin (and it references a foreignColumn in a different table).
            
            There CAN be more than 1 instance of the table to which the ForeignKey column belongs (the TableToJoin).
            There should NOT be more than 1 instance of the table to which the ForeignKey points (the foreignColumn's Table).
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <param name="foreignColumnTableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.String,System.String)">
            <summary>
            Only use this if the ForeignKey DOES NOT BELONG to the TableToJoin (but rather, it POINTS TO the TableToJoin).
            
            There CAN be more than 1 instance of the TableToJoin.
            There CAN be more than 1 instance of the Foreign Table.
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <param name="tableToJoinTableAlias"></param>
            <param name="foreignColumnTableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column,System.String)">
            <summary>
            Only use this if the ForeignKey BELONGS TO the TableToJoin (and it references a foreignColumn in a different table).
            
            There CAN be more than 1 instance of the TableToJoin.
            There CAN be more than 1 instance of the Foreign Table.
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="tableToJoinTableAlias"></param>
            <param name="foreignKeyColumn"></param>
            <param name="foreignColumnTableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.String)">
            <summary>
            Only use this if the ForeignKey BELONGS TO the TableToJoin (and it references a foreignColumn in a different table).
            
            There CAN be more than 1 instance of the table to which the ForeignKey column belongs (the TableToJoin).
            There should NOT be more than 1 instance of the table to which the ForeignKey points (the foreignColumn's Table).
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <param name="foreignColumnTableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column)">
            <summary>
            Only use this if the ForeignKey DOES NOT BELONG TO the TableToJoin (But rather it POINTS TO the TableToJoin)
            
            There should not be more than 1 instance of the table to which the ForeignKey column belongs.
            There CAN be more than 1 instance of the tableToJoin.
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="tableToJoinTableAlias"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column)">
            <summary>
            Adds a JoinElement to the end of the source SQLElement which joins
            the specified table on the specified foreignKey to the preceding element's table.
            
            Uses each TableDefinition's TableDefinition.TableAlias
            
            Only use this if there will only be 1 instance of each table in the entire SQLElement.
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column,System.String,System.String)">
            <summary>
            Adds a JoinElement to the end of the source SQLElement which joins
            the specified table on the specified foreignKey to the preceding element's table.
            </summary>
            <param name="source"></param>
            <param name="joinType"></param>
            <param name="tableToJoin"></param>
            <param name="foreignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.AssertRootIsSelectValue(UtilityData.SQL.SQLElementBase)">
            <summary>
            Asserts that the given rootElement is NOT a SQLElementRaw and IS a SELECT Element.
            </summary>
            <param name="rootElement"></param>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectTop(UtilityData.SQL.SQLElementBase,System.Int32)">
            <summary>
            Modifies the root SQLELement's SelectValue so that it Selects the top "numberOfTopRecordsToSelect" number of records.
            </summary>
            <param name="source"></param>
            <param name="numberOfTopRecordsToSelect">The number of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectPercentage(UtilityData.SQL.SQLElementBase,System.Int32)">
            <summary>
            Modifies the root SQLELement's SelectValue so that it Selects the top "percentageOfRecordsToSelect" percentage of records.
            </summary>
            <param name="source"></param>
            <param name="percentageOfRecordsToSelect">The percentage of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectDistinct(UtilityData.SQL.SQLElementBase)">
            <summary>
            Modifies the root SQLELement's SelectValue so that it Selects distinct records.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Sum(UtilityData.Database.Column)">
            <summary>
            Uses columnToSum.TableDefinition.TableAlias
            </summary>
            <param name="columnToSum"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Max(UtilityData.Database.Column)">
            <summary>
            Uses columnToSum.TableDefinition.TableAlias
            </summary>
            <param name="columnInWhichToFindMax"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.RawQuery(UtilityData.SQL.SQLConnection,System.String)">
            <summary>
            Executes a Query from a raw string. This method is NOT recommended because it does NOT
            use SqlParameters. Use a SQLElement.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:UtilityData.SQL.Qry.Update(UtilityData.Database.Column,System.Object)">
            <summary>
            Updates all of the rows in the column's table with the
            specified value in the specified column.
            </summary>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.AppendClause(UtilityData.SQL.SQLElementBase,UtilityData.SQL.SQLElementBase)">
            <summary>
            Appends the specified clause to the source SQLElementBase and returns the source.
            </summary>
            <param name="source"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Go(UtilityData.SQL.SQLElementBase)">
            <summary>
            Executes the SQLElement
            
            Returns QueryResult if SQLElement is a Query.
            Returns null if SQLElement is NOT a Query.
            
            Uses the SQLConnection for the mainTargetTable of the source SQLElement
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Go(UtilityData.SQL.SQLElementBase,UtilityData.SQL.SQLConnection)">
            <summary>
            Executes the SQLElement
            
            Returns QueryResult if SQLElement is a Query.
            Returns null if SQLElement is NOT a Query.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectSum(UtilityData.Database.Column)">
            <summary>
            Uses columnToSum.TableDefinition.TableAlias
            </summary>
            <param name="columnToSum"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectMax(UtilityData.Database.Column)">
            <summary>
            Uses columnFromWhichToFindMax.TableDefinition.TableAlias
            </summary>
            <param name="columnFromWhichToFindMax"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(UtilityData.Database.Column[])">
            <summary>
            For each column, uses column.TableDefinition.TableAlias
            
            This is not to be used if there will be more than 1 instance of a Table
            in the SQLElement
            </summary>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(UtilityData.SQL.SQLFunction,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Uses tableFromWhichToSelect.TableAlias
            </summary>
            <param name="function"></param>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Uses tableDefinition.TableAlias
            </summary>
            <param name="tableDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column[])">
            <summary>
            Selects the columns from the first specified Table and all of the columns in additionalColumnsToSelect
            </summary>
            <param name="tableDefinition"></param>
            <param name="additionalColumnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(System.String,UtilityData.Database.Column,System.String,UtilityData.Database.Column)">
            <summary>
            
            </summary>
            <param name="tableAlias1">TableAlias for columnToSelect1</param>
            <param name="columnToSelect1"></param>
            <param name="tableAlias2">TableAlias for columnToSelect2</param>
            <param name="columnToSelect2"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(System.String,UtilityData.Database.Column,System.String,UtilityData.Database.Column,System.String,UtilityData.Database.Column)">
            <summary>
            
            </summary>
            <param name="tableAlias1">TableAlias for columnToSelect1</param>
            <param name="columnToSelect1"></param>
            <param name="tableAlias2">TableAlias for columnToSelect2</param>
            <param name="columnToSelect2"></param>
            <param name="tableAlias3">TableAlias for columnToSelect3</param>
            <param name="columnToSelect3"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(System.Collections.Generic.List{UtilityData.Database.Views.ColumnGroup})">
            <summary>
            
            </summary>
            <param name="columnsToSelect">Key is the TableAlias tied to the corresponding Value columns</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Select(System.String,UtilityData.Database.Column[])">
            <summary>
            All columns must belong to the same table definition
            </summary>
            <param name="tableAliasForColumns"></param>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Column[])">
            <summary>
            All columns must belong to the same table definition
            
            Uses columnsToSelect[0].TableDefinition.TableAlias
            </summary>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column[])">
            <summary>
            For each column, uses column.TableDefinition.TableAlias
            
            Selects the specified columnsToSelect from tableFromWhichToSelect.
            
            The columns in columnsToSelect do NOT need to be in the same TableDefinition (they just need
            to be in some TableDefinition that is joined later in the SQLElement).
            
            This is not to be used if there will be more than 1 instance of a Table
            in the SQLElement
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Selects all columns from the specified table
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectAllFrom(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Selects all (SELECT *) from the table.
            
            Uses tableFromWhichToSelect.TableAlias
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectAllFrom(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Selects all (SELECT *) from the table.
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectAllWhere(UtilityData.Database.Column,System.Object)">
            <summary>
            Selects all columns from the table definition of the whereColumn where
            the whereColumn=value
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectPrimaryKeyFrom(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Selects the Primary Key from the specified table.
            
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectPrimaryKeyWhere(UtilityData.Database.Column,System.Object)">
            <summary>
            Selects the Primary Key from the table of the given whereColumn
            where the whereColumn=value
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.From(UtilityData.SQL.ISQLVariables.SelectValue,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Uses tableFromWhichToSelect.TableAlias
            </summary>
            <param name="source"></param>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.From(UtilityData.SQL.ISQLVariables.SelectValue,UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Returns a Select SQLElement
            </summary>
            <param name="source"></param>
            <param name="tableFromWhichToSelect"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Where column=value
            
            Uses whereColumn.Column.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            Where column=value
            
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            Where column=value
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,UtilityData.SQL.SQLElement)">
            <summary>
            Where column=SQLElement
            
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,UtilityData.SQL.SQLElement)">
            <summary>
            Where column=SQLElement
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            
            Uses whereColumn1.TableDefinition.TableAlias
            and
            whereColumn2.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn1"></param>
            <param name="value1"></param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            
            Uses the same TableAlias for both columns
            </summary>
            <param name="source"></param>
            <param name="whereColumn1"></param>
            <param name="value1"></param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            </summary>
            <param name="source"></param>
            <param name="tableAlias1">TableAlias for whereColumn1</param>
            <param name="whereColumn1"></param>
            <param name="tableAlias2">TableAlias for whereColumn2</param>
            <param name="value1"></param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            AND
            column3=value3
            
            Uses whereColumn1.TableDefinition.TableAlias
            and
            whereColumn2.TableDefinition.TableAlias
            and
            whereColumn3.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn1"></param>
            <param name="value1"></param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <param name="whereColumn3"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            AND
            column3=value3
            
            Uses the same TableAlias for all 3 columns
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn1"></param>
            <param name="value1"></param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <param name="whereColumn3"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object,System.String,UtilityData.Database.Column,System.Object,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            Where 
            column1=value1
            AND
            column2=value2
            AND
            column3=value3
            </summary>
            <param name="source"></param>
            <param name="tableAlias1">TableAlias for whereColumn1</param>
            <param name="whereColumn1"></param>
            <param name="value1"></param>
            <param name="tableAlias2">TableAlias for whereColumn2</param>
            <param name="whereColumn2"></param>
            <param name="value2"></param>
            <param name="tableAlias3">TableAlias for whereColumn3</param>
            <param name="whereColumn3"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereNotEquals(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            column != value AND
            </summary>
            <param name="source"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereNotNull(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            Uses column.TableDefinition.TableAlias
            
            column IS NOT NULL AND
            </summary>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereNotNull(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            column IS NOT NULL AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNotNullOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NOT NULL OR
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNotNullAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NOT NULL AND
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNotNullOr(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NOT NULL OR
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNotNullAnd(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NOT NULL AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereNull(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            whereColumn IS NULL
            
            uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereNull(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            whereColumn IS NULL
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNullOr(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NULL OR
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNullOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NULL OR
            
            uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNullAnd(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NULL AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereNullAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column)">
            <summary>
            (whereColumn IS NULL AND
            
            uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereBetween(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object,System.Object)">
            <summary>
            whereColumn BETWEEN value1 AND value2
            
            Uses column.TableDefinition.TableAlias
            </summary>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereBetween(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object,System.Object)">
            <summary>
            whereColumn BETWEEN value1 AND value2
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereLike(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn LIKE value
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereAnd(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value AND
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereOr(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereOr(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            (whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            (whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereAnd(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            (whereColumn=value AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            (whereColumn=value AND
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhereOr(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            OR whereColumn=value)
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhereOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value) OR
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhereAnd(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value) AND
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhereAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value) AND
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhere(UtilityData.SQL.SQLElementBase,System.String,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value) END
            </summary>
            <param name="source"></param>
            <param name="tableAlias"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhere(UtilityData.SQL.SQLElementBase,UtilityData.Database.Column,System.Object)">
            <summary>
            whereColumn=value) END
            </summary>
            <param name="source"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.IsInDatabase(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.List{System.Object})">
            <summary>
            Determines if a row in the database exists with ALL of the given column values.
            
            All of the columns must belong to the same TableDefinition.
            </summary>
            <param name="columns"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.IsInDatabase(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.List{System.Object},System.Object@)">
            <summary>
            Determines if a row in the database exists with ALL of the given column values.
            
            All of the columns must belong to the same TableDefinition.
            </summary>
            <param name="columns"></param>
            <param name="values"></param>
            <param name="firstPrimaryKey">The primary key of the first row that is found (null if none found)</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.IsInDatabase(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object}@)">
            <summary>
            Determines if a row in the database exists with ALL of the given column values.
            
            All of the columns must belong to the same TableDefinition.
            
            Uses column.TableDefinition.TableAlias
            </summary>
            <param name="columns"></param>
            <param name="values"></param>
            <param name="primaryKeys">The primary keys of any rows that were found using the criteria of the given column values</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.Where(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object)">
            <summary>
            Where column=value
            </summary>
            <param name="source"></param>
            <param name="strongRowColumn">The where column</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereLike(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object)">
            <summary>
            whereColumn LIKE value
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereBetween(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object,System.Object)">
            <summary>
            whereColumn BETWEEN value1 AND value2
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.WhereOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object)">
            <summary>
            whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="strongRowColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.OpenWhereOr(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object)">
            <summary>
            (whereColumn=value OR
            </summary>
            <param name="source"></param>
            <param name="strongRowColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.CloseWhereAnd(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn,System.Object)">
            <summary>
            whereColumn=value) AND
            </summary>
            <param name="source"></param>
            <param name="strongRowColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectAllFrom(UtilityData.Database.Rows.StrongRow)">
            <summary>
            Selects all of the columns from the given StrongRow
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column[])">
            <summary>
            Selects the specified columns from the given StrongRow
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Rows.StrongRow,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Selects the specified columns from the given StrongRow
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectAllWithCompressionFrom(UtilityData.Database.Rows.StrongRow)">
            <summary>
            Selects all of the columns from the given StrongRow. Compresses all of the table aliases.
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectWithCompressionFrom(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column[])">
            <summary>
            Selects the specified columns from the given StrongRow. Compresses all of the table aliases.
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectWithCompressionFrom(UtilityData.Database.Rows.StrongRow,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Selects the specified columns from the given StrongRow. Compresses all of the table aliases.
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectFrom(UtilityData.Database.Rows.StrongRow,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Boolean)">
            <summary>
            Selects the specified columns from the given StrongRow
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRow"></param>
            <param name="compressTableAliases">If true, compresses all of the table aliases used in this SQLElement and the
            clauses that follow.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowColumn[])">
            <summary>
            Adds the given additional columns to the root Select Value of the source SQLElement.
            
            All of the provided columns must belong to the same StrongRow.
            </summary>
            <param name="additionalColumnsToSelect">The columns to add to the root Select Value.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn[])">
            <summary>
            Adds the given additional columns to the root Select Value of the source SQLElement.
            
            All of the provided columns must belong to the same StrongRow.
            </summary>
            <param name="additionalColumnsToSelect">The columns to add to the root Select Value.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn[])">
            <summary>
            Adds the given additional columns to the root Select Value of the source SQLElement.
            
            All of the provided columns must belong to the same StrongRow.
            </summary>
            <param name="additionalColumnsToSelect">The columns to add to the root Select Value.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column[])">
            <summary>
            Adds the given additional columns to the root Select Value of the source SQLElement.
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRowOwner">The StrongRow that contains the given columnsToSelect</param>
            <param name="additionalColumnsToSelect">The columns to add to the root Select Value.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRow)">
            <summary>
            Adds all of the columns from the given strongRowOwner to the root Select Value of the source SQLElement.
            
            </summary>
            <param name="strongRowOwner">The StrongRow that contains the columns.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.SelectColumns(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRow,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Adds the given additional columns to the root Select Value of the source SQLElement.
            
            All of the provided columns must belong to the given StrongRow.
            </summary>
            <param name="strongRowOwner">The StrongRow that contains the given columnsToSelect</param>
            <param name="additionalColumnsToSelect">The columns to add to the root Select Value.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.JoinOn(UtilityData.SQL.SQLElementBase,UtilityData.SQL.JoinType,UtilityData.Database.Rows.StrongRowForeignKeyColumn,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            For Example, let's say we have 3 tables: BusinessPartner, BusinessPartnerDepartment and Address.
            
            If we started with a BusinessPartnerDepartmentRow, we would actually want to create a completely
            new StrongRow of BusinessPartnerRow and then use that as the "root" StrongRow.
            
            To access the AddressRow StrongRow, we would NOT pass in a new instance of an AddressRow.
            Instead, we would access it as: BusinessPartnerRow.BusinessPartnerDepartmentRow.AddressRow.
            </summary>
            <param name="columnsToSelectFromJoin">The columns to select from the StrongRow that will be joined.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn)">
            <summary>
            Inner Joins the specified ForeignStrongRow. Selects no additional columns.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinSelectingAllOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn)">
            <summary>
            Inner Joins the specified ForeignStrongRow. Selects all of the columns in the Foreign Row.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn,UtilityData.Database.Column[])">
            <summary>
            Inner Joins the specified ForeignStrongRow. Selects the specified columns from the ForeignStrongRow.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <param name="columnsToSelectFromJoin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Inner Joins the specified ForeignStrongRow. Selects the specified columns from the ForeignStrongRow.
            </summary>
            <param name="source"></param>
            <param name="columnsToSelectFromJoin">These columns will be added to the Select statement at the start of this Query.</param>
            <param name="strongRowForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinSelectingAllOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn)">
            <summary>
            Left Outer Joins the specified ForeignStrongRow. Selects all of the columns in the Foreign Row.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn)">
            <summary>
            Left Outer Joins the specified ForeignStrongRow. Selects no additional columns.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn,UtilityData.Database.Column[])">
            <summary>
            Left Outer Joins the specified ForeignStrongRow. Selects the specified columns from the ForeignStrongRow.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <param name="columnsToSelectFromJoin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.StrongRowForeignKeyColumn,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Left Outer Joins the specified ForeignStrongRow. Selects the specified columns from the ForeignStrongRow.
            </summary>
            <param name="source"></param>
            <param name="strongRowForeignKeyColumn"></param>
            <param name="columnsToSelectFromJoin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn)">
            <summary>
            Inner Joins the specified ForeignKeyStrongRow. Selects no additional columns.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn,UtilityData.Database.Column[])">
            <summary>
            Inner Joins the specified ForeignKeyStrongRow. Selects the specified columns from the ForeignKeyStrongRow.
            </summary>
            <param name="source"></param>
            <param name="columnsToSelectFromJoin">These columns will be added to the Select statement at the start of this Query.</param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Inner Joins the specified ForeignKeyStrongRow. Selects the specified columns from the ForeignKeyStrongRow.
            </summary>
            <param name="source"></param>
            <param name="columnsToSelectFromJoin">These columns will be added to the Select statement at the start of this Query.</param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.InnerJoinSelectingAllOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn)">
            <summary>
            Inner Joins the specified ForeignKeyStrongRow. Selects all of the columns in the Foreign Key Row.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn)">
            <summary>
            Left Outer Joins the specified ForeignKeyStrongRow. Selects no additional columns.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn,UtilityData.Database.Column[])">
            <summary>
            Left Outer Joins the specified ForeignKeyStrongRow. Selects the specified columns from the ForeignKeyStrongRow.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <param name="columnsToSelectFromJoin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Left Outer Joins the specified ForeignKeyStrongRow. Selects the specified columns from the ForeignKeyStrongRow.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <param name="columnsToSelectFromJoin"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.Qry.LeftOuterJoinSelectingAllOn(UtilityData.SQL.SQLElementBase,UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn)">
            <summary>
            Left Outer Joins the specified ForeignKeyStrongRow. Selects all of the columns in the Foreign Key Row.
            </summary>
            <param name="source"></param>
            <param name="foreignKeyToThisStrongRowColumn"></param>
            <returns></returns>
        </member>
        <member name="F:UtilityData.SQL.SQLElementType.Join">
            <summary>
            Join queries cannot stand on their own. They must be tied to
            a Select query piece
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLElement">
            <summary>
            An SQL Statement along with the Parameters that will be used to execute the command.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.AppendClause(UtilityData.SQL.SQLElementBase)">
            <summary>
            Adds the specified SQLElementBase as the last Clause in 
            the sequence of Clauses that succeed this SQLElementBase.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.GetSQLCommandWithParametersReplaced">
            <summary>
            Formats the SQLElementBase's command so that
            all of the Parameter names are replaced with the parameter's values
            then returns that formatted string
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.GetSQLConnection">
            <summary>
            Returns the SQLConnection used to execute this SQLElementBase
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.GetSQLCommandWithParametersReplaced(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Formats the SQLElementBase's command so that
            all of the Parameter names are replaced with the parameter's values
            then returns that formatted string
            </summary>
            <param name="command"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.RollbackFailedTransaction(System.Exception,System.Data.IDbTransaction)">
            <summary>
            Rolls back a transaction and throws a new SQLTransactionErrorException
            </summary>
            <param name="ex"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.CreateTransaction(UtilityData.SQL.SQLConnection)">
            <summary>
            Creates a Transaction for the passed SQLConnection
            </summary>
            <param name="sqlConnection"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.CreateSqlCommand(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},UtilityData.SQL.SQLConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates an SqlCommand for this SQLElement from a connection and transaction
            </summary>
            <param name="sqlConnection"></param>
            <param name="sqlTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.ExecuteNonQuery(UtilityData.SQL.SQLConnection)">
            <summary>
            Executes this Non-Query SQLElement and returns the number of Affected Rows
            </summary>
            <param name="sqlConnection"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.RawQuery(UtilityData.SQL.SQLConnection,System.String)">
            <summary>
            Executes a Query from a raw string. This method is NOT recommended because it does NOT
            use SqlParameters. Use a SQLElement or SQLElementRaw.
            </summary>
            <param name="SQLConnection"></param>
            <param name="rawQueryString"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.ToSQL(System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Converts this SQLElementBase into a SQL statement that can be
            used in a Query or non-Query. Appends all of the commands and
            parameters from any succeeding clauses.
            </summary>
            <param name="indexOfVariable"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementBase.ToSQLElementRaw">
            <summary>
            Converts this SQLElementBase (and all of its clauses) to a single SQLElementRaw.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.SQLElementBase.Parent">
            <summary>
            The SQLElementBase that comes before this one
            (the SQLElementBase to which this SQLElementBase is a clause)
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElementBase.Clause">
            <summary>
            The Element that follow this SQLElementBase, in
            sequential order. The Child element could 
            contain an element within itself and so on.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElementBase.CompressTableAliases">
            <summary>
            Only used if this is the root SQLElementBase.
            
            If true, compresses the table aliases that are used in this
            SQLElementBase and the following clauses.
            
            Defaults to false.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElementBase.RootElement">
            <summary>
            The SQLElementBase at the start of the sequence of elements
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElementBase.LastClause">
            <summary>
            The last Clause in 
            the sequence of Clauses that succeed this SQLElementBase.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLElement.#ctor(UtilityData.SQL.SQLElementType,UtilityData.SQL.ISQLVariables.ISQLVariable,UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElementBase)">
            <summary>
            CANNOT be used for SELECT or JOIN or DELETE or UPDATE or INSERT SQLElements
            </summary>
            <param name="type"></param>
            <param name="variable"></param>
            <param name="mainTargetTable"></param>
            <param name="clause"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLElement.#ctor(UtilityData.SQL.SQLElementType,System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLVariable},UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElementBase)">
            <summary>
            CANNOT be used for SELECT or JOIN or DELETE or UPDATE or INSERT SQLElements
            </summary>
            <param name="type"></param>
            <param name="mainTargetTable"></param>
            <param name="clause"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLElement.GetSQLConnection">
            <summary>
            Returns the SQLConnection used to execute this SQLElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElement.ToSelectSQL(System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Assuming that this SQLElement is a SELECT statement,
            creates the necessary text to perform the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElement.ToSQL(System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Converts this SQLElement into a SQL statement that can be
            used in a Query or non-Query. Appends all of the commands and
            parameters from any succeeding clauses.
            </summary>
            <param name="indexOfVariable"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.SQLElement.MainTargetTable">
            <summary>
            The target Table that is being commanded by this SQLElement
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElement.IsQuery">
            <summary>
            Indicates whether this SQLElement is a Query
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.JoinValue">
            <summary>
            There should be only 1 JoinValue for each Join SQLElement
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.JoinValue.FormatForSQLElement(System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Gets the comparison of the two columns in this Join statement
            (e.g. foreignKeyColumn=foreignColumn)
            </summary>
            <param name="indexOfVariable"></param>
            <param name="sqlParameters"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.JoinValue.ForeignKeyColumn">
            <summary>
            The ForeignKey Column of THIS Table (the Join SQLElement's MainTargetTable)
            used to tie this Table with the Previous Table of some other SQLElement
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.JoinValue.ForeignColumn">
            <summary>
            The Foreign Column that belongs to the PREVIOUS Table (the MainTargetTable
            of the Parent SQLElement)
            This is used to tie this MainTargetTable with the Previous SQLElement's MainTargetTable
            </summary>
        </member>
        <member name="T:UtilityData.Database.Tables.TableDefinition">
            <summary>
            A table definition which defines the columns
            that each Row must fill
            </summary>
        </member>
        <member name="F:UtilityData.Database.Tables.TableDefinition.SummaryColumnGroupName">
            <summary>
            It contains the columns that essentially summarize the table if a user only wanted to see the bare bones of the table.
            
            The Summary column group should have as few columns as possible to create the summary of the table.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Updates the specified Column (ColumnValue.Column) with the specified value (ColumnValue.Value) in ALL of
            the rows in this table
            </summary>
            <param name="valueToUpdate"></param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(UtilityData.Database.Rows.ColumnValue,UtilityData.SQL.SQLElement)">
            <summary>
            Updates the specified Column (ColumnValue.Column) with the specified value (ColumnValue.Value) in ALL of
            the rows in this table
            </summary>
            <param name="valueToUpdate"></param>
            <param name="clause"></param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(UtilityData.Database.Column,System.Object)">
            <summary>
            Updates ALL the rows in the table with the specified value
            for the specified column.
            </summary>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(UtilityData.Database.Column,System.Object,UtilityData.SQL.SQLElement)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
            <param name="clause"></param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{System.Object},UtilityData.SQL.SQLElement)">
            <summary>
            Updates rows to have the new specified values in the specified columns.
            
            Allows certain functions to be performed on certain columns.
            </summary>
            <param name="primaryKey"></param>
            <param name="clause"></param>
            <param name="valuesOrFunctions">Each element can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.ColumnValue})">
            <summary>
            Updates the row with the specified primary key
            with the new values as specified in valuesToUpdate.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.ColumnValue},UtilityData.SQL.SQLElement)">
            <summary>
            Updates the row with the specified primary key
            with the new values as specified in valuesToUpdate.
            </summary>
            <param name="primaryKey"></param>
            <param name="valuesToUpdate"></param>
            <param name="clause"></param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,UtilityData.Database.Column,System.Object)">
            <summary>
            Updates the row with the specified primary key
            to have the new specified value in the specified column.
            </summary>
            <param name="primaryKey"></param>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,UtilityData.Database.Column,System.Object,UtilityData.SQL.SQLElement)">
            <summary>
            Updates the row with the specified primary key
            to have the new specified value in the specified column.
            </summary>
            <param name="primaryKey"></param>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates the row with the specified primary key
            to have the new specified values in the specified columns.
            </summary>
            <param name="valuesOrFunctions">Each element can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Update(System.Object,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{System.Object},UtilityData.SQL.SQLElement)">
            <summary>
            Updates the row with the specified primary key
            to have the new specified values in the specified columns.
            
            Allows certain functions to be performed on certain columns.
            </summary>
            <param name="primaryKey"></param>
            <param name="clause"></param>
            <param name="valuesOrFunctions">Each element can either be a data value (object) or a SQLFunction.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{UtilityData.Database.Column},UtilityData.Database.Column,UtilityData.Database.Column[])">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyColumn">The PrimaryKey of the ColumnCollection. This column must have a ColumnType
            of PrimaryKey. It will be the 0th index in the ColumnCollection.</param>
            <param name="columns"></param>
            <param name="columnsDefiningUniqueness">If this is null, then rows in this TableDefinition can be completely identical and still be valid.</param>
            <param name="columnsDefiningSummary">It contains the columns that essentially summarize the table if a user only wanted to see the bare bones of the table.
            
            The Summary column group should have as few columns as possible to create the summary of the table.</param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{UtilityData.Database.Column},UtilityData.Database.Column,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Ensures that multiple columns do not have the same name
            </summary>
            <param name="tableName">The name of this column</param>
            <param name="primaryKeyColumn">The PrimaryKey of the ColumnCollection. This column must have a ColumnType
            of PrimaryKey. It will be the 0th index in the ColumnCollection.</param>
            <param name="columnsDefiningUniqueness">If this is null, then rows in this TableDefinition can be completely identical and still be valid.</param>
            <param name="columnsDefiningSummary">It contains the columns that essentially summarize the table if a user only wanted to see the bare bones of the table.
            
            The Summary column group should have as few columns as possible to create the summary of the table.</param>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.UpdateAcceptableValuesOfColumnsWithValueConstraints">
            <summary>
            Goes through all of the columns in this table and if any have ValueConstraints, updates the Acceptable Values.
            This should be used when the connection to the database has been made (so that the values can be retrieved).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.HasReferenceTo(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Indicates whether this TableDefinition has a reference to the given tableDefinition.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.GetEnumValues">
            <summary>
            This is only applicable if this TableDefinition's Primary Key Column
            is a is an enum column.
            
            Gets all of the values of this table's primary key in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectWhere(UtilityData.Database.Column,System.Object)">
            <summary>
            Selects the specified column where that same column has the specified value.
            </summary>
            <param name="columnToSelect"></param>
            <param name="whereValueOfColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectAll">
            <summary>
            uses this.TableAlias
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectAll(System.Object)">
            <summary>
            Selects all the columns of this Table where the primary key equals
            the given primary key.
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectAll(UtilityData.SQL.ISQLVariables.WhereValue)">
            <summary>
            Uses this.TableAlias
            </summary>
            <param name="whereValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Select(UtilityData.Database.Column[])">
            <summary>
            uses this.TableAlias
            </summary>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Select(System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            uses Tcolumn.TableDefinition.TableAlias
            </summary>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.Select(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.WhereValue})">
            <summary>
            Uses this.TableAlias
            </summary>
            <param name="columnsToSelect"></param>
            <param name="whereValues"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectPrimaryKey(UtilityData.Database.Column,System.Object)">
            <summary>
            Selects the primary key where the specified column has the specified value
            
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.SelectPrimaryKey(UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Select the primary key where the specified column has the specified value
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.IsRowInDatabase(System.Object@,System.Object[])">
            <summary>
            Gets the first primary key if multiple are returned.
            </summary>
            <param name="primaryKeys"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.IsRowInDatabase(System.Collections.Generic.List{System.Object}@,System.Object[])">
            <summary>
            For the columns of the row for which to search, this method
            uses the column group that defines uniqueness for this Table Definition.
            
            Therefore, a columnValue should be provided for each column in the column group
            for uniqueness.
            </summary>
            <param name="columnGroupNameForUniqueness"></param>
            <param name="columnValue"></param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.IsRowInDatabase(System.String,System.Object[],System.Collections.Generic.List{System.Object}@)">
            <summary>
            
            </summary>
            <param name="columnGroupNameForUniqueness">The column group name in this Table Definition that will
            define uniqueness for the row that we're attempting to find</param>
            <param name="columnValue"></param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.IsRowInDatabase(UtilityData.Database.Column,System.Object,System.Object@)">
            <summary>
            Is there a row in the database where the specified column has the specified value?
            If multiple are returned, the first primary key will be returned.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.IsRowInDatabase(UtilityData.Database.Column[],System.Object[],System.Collections.Generic.List{System.Object}@)">
            <summary>
            Indicates whether there is a row in this table in the database
            with the specified column values.
            All of the column values should belong to this TableDefinition.
            
            Out's the primary key if a row is found (if multiple are found,
            the first primary key will be out'd)
            Otherwise out's null.
            </summary>
            <param name="columns">The columns that will be used to identify
            if a row is in the database.
            
            These columns must all belong to this TableDefinition
            
            If these are null (as in the case where the ColumnGroupDefiningUniqueness is null)
            then this method will automatically return IsInDatabaseResult.None</param>
            <param name="values">The values that must be in those columns
            in order for a row to be in the database</param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.CreateJoinValueToOtherTable(System.String,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column)">
            <summary>
            JoinType is automatically determined
            </summary>
            <param name="tableAliasForThisTable"></param>
            <param name="otherTable"></param>
            <param name="tableAlias"></param>
            <param name="preferredForeignKeyColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.CreateJoinValueToOtherTable(System.String,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column,System.Boolean,UtilityData.SQL.JoinType)">
            <summary>
            Creates a JoinValue to join this TableDefinition to the specified other table.
            </summary>
            <param name="otherTable"></param>
            <param name="tableAlias"></param>
            <param name="preferredForeignKeyColumn">The preferred foreign key column to join this tableDefinition to the given otherTable. If not provided (i.e. null), then
            the first applicable foreignKeyColumn will be used</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.WherePrimaryKeyEquals(System.Object,System.String)">
            <summary>
            </summary>
            <param name="primaryKeyValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Tables.TableDefinition.WherePrimaryKeyEquals(System.Object,System.String,UtilityData.SQL.SQLElement)">
            <summary>
            </summary>
            <param name="primaryKeyValue"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.TableAlias">
            <summary>
            The default TableAlias for this TableDefinition (i.e. the name of the TableDefinition).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.Name">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.Columns">
            <summary>
            The "columns" or "fields" in the Table.
            More simply, akin to the variable definitions in a class.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.FullName">
            <summary>
            The full name of the Table used to identify the Table.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.ColumnsDefiningUniqueness">
            <summary>
            The Columns that, combined, make a row in this Table unique.
            
            MUST NOT INCLUDE THE PRIMARY KEY COLUMN
            
            If this is null, then rows in this TableDefinition can be completely identical and still be valid.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.SummaryColumns">
            <summary>
            It contains the columns that essentially summarize the table if a user only wanted to see the bare bones of the table.
            
            The Summary column group should have as few columns as possible to create the summary of the table.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.ColumnsToPascalCase">
            <summary>
            The columns that will be turned to PascalCase when PascalCaseStrings() is called
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.TablesReferencedByThis">
            <summary>
            The TableDefinitions that are referenced through the use of ForeignKeyColumns
            in this TableDefinition. The Value (int) is the number of foreign key columns
            that reference the Key (TableDefinition).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.TablesReferencingThis">
            <summary>
            The TableDefinitions that reference this TableDefinition through the use
            of ForeignKeyColumns. The Value (int) is the number of foreign key columns
            in the Key (other TableDefinition) that reference THIS TableDefinition.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Tables.TableDefinition.ColumnGroups">
            <summary>
            Groups of columns grouped by and used for different purposes.
            The column groups are identified by a ColumnGroupName (string).
            </summary>
        </member>
        <member name="P:UtilityData.Database.ITableGroupElement.TableDefinition">
            <summary>
            If this ITableGroupElement is a TableGroup then
            this is the TableDefinition of this TableGroup's
            first element.
            
            Otherwise, it's the TableDefinition of the TableGroupElement.
            </summary>
        </member>
        <member name="P:UtilityData.Database.ITableGroupElement.JoinValue">
            <summary>
            The JoinValue to join this ITableGroupElement's TableDefinition to a foreign key
            in a different TableDefinition 
            </summary>
        </member>
        <member name="P:UtilityData.Database.ITableGroupElement.TableDefinitionsReferencedByThis">
            <summary>
            Gets the TableDefinitions that the TableDefinition of this TableGroupElement references
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.FilterValue">
            <summary>
            Given a specified value, puts the value through a filter
            and comes out with the same or a different value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheet.#ctor(System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            
            </summary>
            <param name="spreadsheetName"></param>
            <param name="standardColumnFormatOptions">The standard column format options for any column that does not have
            a columnFormatOptions specified.</param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheet.GetIndexOfColumn(System.String)">
            <summary>
            Retrieves the first column in the spreadsheet
            with the specified name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Spreadsheet.ColumnFormatOptions">
            <summary>
            The standard column format options for any column that does not have
            a columnFormatOptions specified.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheet.Columns">
            <summary>
            Gets the Columns.
            The columns that will make up this spreadsheet.
            
            Key is the index of the column, value is the column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheet.FilterValueForColumns">
            <summary>
            A collection of the FilterValue delegates that correspond with
            the Columns of this Spreadsheet through the column index.
            
            The appropriate delegate (for the column) 
            
            1. for an ImportSpreadsheet:
                will be called any time a value from a column is populated from the database
                into the spreadsheet. This gives the chance to modify the value before it gets
                populated into the spreadsheet.
            2. for an ExportSpreadsheet:
                will be called whenever a value is pulled from a DataRow and parsed into a Row.
                This gives the chance to modify the value before it gets inserted into the Row.
            
            
            This gives the chance to modify the value before it is used.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheet.SpreadsheetName">
            <summary>
            The name of the spreadsheet.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheet.Item(System.String)">
            <summary>
            Gets the index of the specified column name
            
            Retrieves the first column in the spreadsheet
            with the specified name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.SpreadsheetColumn.#ctor(System.Int32,System.String)">
            <summary>
            Uses String for column Value. Formats column appropriately.
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:UtilityData.Database.SpreadsheetColumn.#ctor(System.Int32,System.String,UtilityData.Database.ColumnValueType)">
            <summary>
            ColumnFormatOptions will be determined automatically from ColumnValueType
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:UtilityData.Database.SpreadsheetColumn.#ctor(System.Int32,System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Uses ValueBaseType.String
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
            <param name="columnFormatOptions"></param>
        </member>
        <member name="M:UtilityData.Database.SpreadsheetColumn.#ctor(System.Int32,System.String,UtilityData.Database.ColumnValueType,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Specified display text overrides the display text in the passed Column
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
            <param name="columnValueType"></param>
            <param name="columnFormatOptions"></param>
        </member>
        <member name="M:UtilityData.Database.SpreadsheetColumn.GetColumnFormatOptionsFromType(UtilityData.Database.ColumnValueType,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            
            </summary>
            <param name="columnType"></param>
            <param name="standardColumnFormatOptions">The ColumnFormatOptions to use if no ColumnFormatOptions could be determined.</param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.SpreadsheetColumn.Name">
            <summary>
            The name of the Column and the display text.
            </summary>
        </member>
        <member name="P:UtilityData.Database.SpreadsheetColumn.Index">
            <summary>
            The index of the Column in the Spreadsheet
            </summary>
        </member>
        <member name="P:UtilityData.Database.SpreadsheetColumn.ValueType">
            <summary>
            The Column Value Type of this column
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.Row">
            <summary>
            A Row holds a piece of Data for each Column
            in the parent Table.
            
            This is basically the "Class"
            
            For example, if the Table in the Database is the PropertyTable
            then this would be the Property class which stores the 
            fields for a Property such as Address1, City, State, Zip, etc. The fields
            that this Row stores is defined in this Row's parent TableDefinition (through
            the use of Columns).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.SelectPrimaryKey">
            <summary>
            Selects the PrimaryKey of this Row by using the Columns in this TableDefinition that make
            this row unique
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.SelectPrimaryKey(System.String)">
            <summary>
            Selects the PrimaryKey of this Row by using the Columns in the specified column group
            
            If the ColumnGroupDefiningUniqueness is null, this returns an empty QueryResult.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.SelectPrimaryKey(UtilityData.Database.Column[])">
            <summary>
            
            </summary>
            <param name="columnsForWhere">The value in this row will be used for each of the given columns</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.SelectPrimaryKey(UtilityData.Database.Rows.ColumnValue[])">
            <summary>
            
            </summary>
            <param name="valuesForWhere">The values should belong to this row</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.QueueForDatabaseInsertion(UtilityData.Log.SenderIdentifier,System.String)">
            <summary>
            Queues the Row for insertion into the database
            ONLY if it is not yet in the database as defined by
            this.IsInDatabase()
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsAnyInDatabase">
            <summary>
            Returns a bool indicating whether the Row is in the database (true)
            or are not in the database (false).
            
            Determines if it's in the database by the ColumnGroupDefiningUniqueness
            
            Does not indicate if there is only one or multiple rows in the database.
            For that information, call IsInDatabase()
            
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase">
            <summary>
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase(System.Object@)">
            <summary>
            Out's primary key of null if not in database
            
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase(UtilityData.Log.SenderIdentifier,UtilityData.Database.Rows.ColumnValue@)">
            <summary>
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <param name="senderIdentifierForErrors"></param>
            <param name="primaryKeyColumnValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase(UtilityData.Log.SenderIdentifier,System.String,System.Object@)">
            <summary>
            Out's the value of the primary key column.
            
            Uses TableDefinition.ColumnsDefininingUniquenessColumnGroupName
            
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <param name="referenceNumberForErrors"></param>
            <param name="primaryKeyColumnValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase(UtilityData.Log.SenderIdentifier,System.String,UtilityData.Database.Rows.ColumnValue@)">
            <summary>
            Using the values in the columns that define uniqueness for this row's
            TableDefinition, determines if this Row is in the database (based on those columns).
            
            If yes (true), updates the primary key of this Row and out's the ColumnValue of 
            primary key.
            If no (false), out's null.
            
            If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None
            </summary>
            <param name="primaryKeyColumnValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsInDatabase(System.String,UtilityData.Log.SenderIdentifier,System.String,UtilityData.Database.Rows.ColumnValue@)">
            <summary>
            Using the values in the columns as defined by the specified column group,
            determines if this Row is in the database (based on those columns).
            
            If yes (true), updates the primary key of this Row and out's the ColumnValue of 
            primary key.
            If no (false), out's null.
            
            Throws error if multiple rows are found in the database because the column group
            that is given should define columns that make this row unique.
            </summary>
            <param name="columnGroupNameForUniqueness">If the ColumnGroupDefiningUniqueness is null, this returns IsInDatabaseResult.None</param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.Update">
            <summary>
            Updates the database row
            as identified by this Row's PrimaryKey.
            
            Updates all of the columns (except the primary key)
            
            The Primary Key must not be null.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.Update(System.Object)">
            <summary>
            Updates the database row
            as identified by the given primary key
            with all of the values in this row.
            
            Updates all of the columns (except the primary key)
            
            The Primary Key of this row is set to the given primary key if the provided
            primary key is not null.
            </summary>
            <param name="primaryKeyValue"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.Update(System.Object,System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.ColumnValue})">
            <summary>
            Updates the database row
            as identified by the given primary key
            with all of the provided values.
            
            The Primary Key of this row is set to the given primary key if the provided
            primary key is not null.
            </summary>
            <param name="primaryKeyValue"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.Update(UtilityData.Database.Column[])">
            <summary>
            Updates the database row
            as identified by this Row's PrimaryKey.
            
            Updates all of the specified columns.
            
            The Primary Key must not be null.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.Update(System.Object,UtilityData.Database.Column[])">
            <summary>
            Updates the database row
            as identified by the given primary key
            with all of the values in the specified columns.
            
            Updates all of the specified columns.
            
            The Primary Key of this row is set to the given primary key if the provided
            primary key is not null.
            </summary>
            <param name="primaryKeyValue"></param>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertOnlyIfNecessary">
            <summary>
            Inserts the Row into the database immediately (if it 
            is not currently in the database. This method first
            checks to ensure that the Row is not in the database).
            
            Returns true if the Row was inserted. Returns false if not.
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertOnlyIfNecessary(System.Collections.Generic.Dictionary{UtilityData.Database.Column,UtilityData.SQL.SQLFunction})">
            <summary>
            Inserts the Row into the database immediately (if it 
            is not currently in the database. This method first
            checks to ensure that the Row is not in the database).
            
            Returns true if the Row was inserted. Returns false if not.
            
            Allows the specified SQL functions to be performed on the specified columns before
            insertion.
            </summary>
            <param name="functionsToUse">The functions to perform on the 
            specified columns</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertOnlyIfNecessary(System.Object@)">
            <summary>
            Inserts the Row into the database immediately (if it 
            is not currently in the database. This method first
            checks to ensure that the Row is not in the database).
            
            Returns true if the Row was inserted. Returns false if not.
            Out's the primary key.
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertOnlyIfNecessary(System.Collections.Generic.Dictionary{UtilityData.Database.Column,UtilityData.SQL.SQLFunction},System.Object@)">
            <summary>
            Inserts the Row into the database immediately (if it 
            is not currently in the database. This method first
            checks to ensure that the Row is not in the database according to the ColumnGroup that
            defines uniqueness).
            
            Returns true if the Row was inserted. Returns false if not.
            Out's the primary key.
            
            Allows the specified SQL functions to be performed on the specified columns before
            insertion.
            </summary>
            <param name="functionsToUse">The functions to perform on the 
            specified columns</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertIntoDatabase(System.Collections.Generic.Dictionary{UtilityData.Database.Column,UtilityData.SQL.SQLFunction})">
            <summary>
            Adds a Transaction to the TransactionQueue that Inserts the Row into the Table in the Database.
            
            Allows the specified SQL functions to be performed on the specified columns before
            insertion.
            
            Call AcceptTransactions() for this Insert to be executed.
            </summary>
            <param name="functionsToUse">The functions to perform on the 
            specified columns </param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertIntoDatabaseImmediately">
            <summary>
            Queues a command to insert this row into the
            database and executes the command immediately
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertIntoDatabaseImmediately(System.Collections.Generic.Dictionary{UtilityData.Database.Column,UtilityData.SQL.SQLFunction})">
            <summary>
            Queues a command to insert this row into the
            database and executes the command immediately.
            
            Allows the specified SQL functions to be performed on the specified columns before
            insertion.
            </summary>
            <param name="functionsToUse">The functions to perform on the 
            specified columns</param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertIntoDBAndGetPrimaryKey">
            <summary>
            Inserts this Row into the database immediately
            and then retrieves the primary key value
            of the Row in the database (uses the values in this row).
            
            ONLY USE THIS IF THE COLUMNS IN THIS ROW MAKE THE ROW UNIQUE.
            
            Otherwise, consider using InsertIntoDatabaseImmediately()
            followed by Row.GetPrimaryKeyValueFromUniqueColumns()
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertIntoDBAndGetPrimaryKey(System.Collections.Generic.Dictionary{UtilityData.Database.Column,UtilityData.SQL.SQLFunction})">
            <summary>
            Inserts this Row into the database immediately
            and then retrieves the primary key value
            of the Row in the database (uses the values in this row).
            
            ONLY USE THIS IF THE COLUMNS IN THIS ROW MAKE THE ROW UNIQUE.
            
            Otherwise, consider using InsertIntoDatabaseImmediately()
            followed by Row.GetPrimaryKeyValueFromUniqueColumns()
            
            Allows the specified SQL functions to be performed on the specified columns before
            insertion.
            </summary>
            <returns></returns>
            <param name="functionsToUse">The functions to perform on the 
            specified columns</param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.#ctor(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Creates a row with NULL for all column values
            </summary>
            <param name="tableDefinition"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.#ctor(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.Object)">
            <summary>
            Creates a row in the specified tableDefinition with 
            the specified value in the specified column.
            </summary>
            <param name="tableDefinition"></param>
            <param name="column"></param>
            <param name="value"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.#ctor(UtilityData.Database.Tables.TableDefinition,System.Collections.Generic.List{System.Object})">
            <summary>
            Expects the values for all columns
            </summary>
            <param name="tableDefinition"></param>
            <param name="values"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.#ctor(UtilityData.Database.Tables.TableDefinition,System.Data.DataRow)">
            <summary>
            Retrieves all of the columns from the DataRow that can be retrieved.
            Tries to retrieve all of the columns based on the parent TableDefinition but
            doesn't get the columns that aren't contained in the DataRow.
            
            If no corresponding column was found in the DataRow, sets the value
            in this Row to NULL.
            </summary>
            <param name="tableDefinition"></param>
            <param name="row"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InitializeValues(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Object})">
            <summary>
            Resets the values in this row to the specified values. If no 
            values are specified for a column, the value in the "Empty Row" will be
            set as the value of the Row
            
            Also resets the TableAlias of the row
            </summary>
            <param name="columnIndexes"></param>
            <param name="values"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.InsertValues(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Object})">
            <summary>
            Inserts the specified values into this Row
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.GetEmptyValues">
            <summary>
            Gets the Empty values for this Row
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.IsEmptyRow">
            <summary>
            Indicates whether this Row has the same values as an "Empty" row.
            An "Empty" row is a row that has not set any values
            for the columns that make this Row unique
            (TableDefinition.ColumnsDefiningUniqueness).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.GetColumnAtIndex(System.Int32)">
            <summary>
            Gets the Column at an index in this row.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.GetPrimaryKeyValueFromUniqueColumns(UtilityData.Database.Tables.TableDefinition,System.Object[])">
            <summary>
            THE ROW YOU'RE LOOKING FOR MUST BE IN THE DATABASE ALREADY.
            
            Uses TableDefinition.ColumnsDefininingUniquenessColumnGroupName
            as the columns that define uniqueness for this row (the columns
            can span multiple tables).
            
            The values must be given for all of the columns in the column group
            ColumnsDefininingUniquenessColumnGroupName.
            
            Given these columns and values, finds the primary key of the row in
            the database (the row can span multiple tables).
            
            
            Throws an error if no row is found.
            
            Throws an error if multiple primary keys are returned because the
            column group did not, in fact, define uniqueness.
            
            </summary>
            <param name="tableHoldingUniqueColumnGroup">The table that has the column group
            that defines uniqueness for the row of interest.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.SetPrimaryKeyValueMatchingAllThisRowValues">
            <summary>
            Sets the PrimaryKey value of this Row to a row in the database
            with ALL of this row's values (except the primary key)
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.GetPrimaryKeyValueMatchingAllThisRowValues">
            <summary>
            Attempts to find a Primary Key in the database by
            trying to find a row in the database with ALL of this
            row's values (except the primary key). If there's a match
            then the value of the primary key of the row in the database will
            be returned.
            
            ONLY use this if the row is made unique by all of the columns
            of this Table (the primary key will not be included in the
            search if it is an incrementing identity).
            
            If a row is NOT made unique but all columns (excluding the incrementing
            identity), use GetPrimaryKeyValueFromUniqueColumns
            
            If no match found, returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.GenerateWherePrimaryKey">
            <summary>
            Generates a WHERE statement in the form
            "WHERE PrimaryKeyName='PrimaryKeyValue'"
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.AcceptLastTransaction">
            <summary>
            Executes only the last requested SQL Transaction in the TransactionQueue
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.AcceptTransactions">
            <summary>
            Executes all of the pending SQL Transactions in the TransactionQueue
            since the last time AcceptTransactions() was called.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.RejectLastTransaction">
            <summary>
            Rejects and removes only the last SQL Transaction that was
            requested.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.RejectTransactions">
            <summary>
            Removes all the pending SQL Transactions in the TransactionQueue
            WITHOUT execution.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.PascalCaseStrings">
            <summary>
            Uses the columns in the Table Definition's ColumnsToPascalCase List
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.PascalCaseStrings(UtilityData.Database.Column[])">
            <summary>
            Normalizes the VarChars, Chars, etc. (the strings)
            in the specified columns of this Row
            by changing all of the strings to Pascal Case
            </summary>
            <param name="columnsToPascalCase"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.NormalizeEnumColumns">
            <summary>
            Normalizes all of the ForeignKey columns that reference Enum columns (i.e. IsReferenceColumnAnEnumColumn==true)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.NormalizeColumn(UtilityData.Database.Column,UtilityData.Database.JoinedRow)">
            <summary>
            Normalizes the specified column in this Row and returns the Normalization Result
            </summary>
            <param name="column"></param>
            <param name="rowsWithValues"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.AsStrongRow``1">
            <summary>
            Returns a new instance of the specified StrongRow which contains
            the data from this Row.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.AssertRowInDatabase(UtilityData.Log.SenderIdentifier,System.String)">
            <summary>
            Asserts that this row is in the database and gets the primary key.
            If the row does not exist in the database, throws a DataIntegrityException exception.
            </summary>
            <param name="senderIdentifierForErrors"></param>
            <param name="referenceNumberForErrors"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.Row.AssertNullValuesAreValid">
            <summary>
            Asserts that all of the values in this Row that are null
            are allowed to be null. 
            
            If there are null values in a column that does not accept null 
            values, then throws an exception.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.Values">
            <summary>
            The number of values must always match the number of columns in the TableDefinition.
            
            The 0th value will always be the value of the PrimaryKey.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.SQLConnection">
            <summary>
            The SQLConnection to connect this Row to the database
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.TransactionQueue">
            <summary>
            A Queue of the pending SQL Commands/Statements that have been requested but have not yet
            been executed.
            
            If the Transactions are accepted through use of AcceptTransactions() then this queue's statements will
            be executed and the statements will be removed from the queue.
            
            If the Transactions are NOT accepted through use of RejectTransactions() then this queue's statements
            will NOT be executed and they will be removed from the queue.
            
            SELECT statements will be executed automatically and not be added to the queue.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.IsRowDBNormalized">
            <summary>
            Indicates whether the Row is normalized and ready for insertion into the database.
            For instance, if this Row has a Municipality Name (string) in a column that is a foreign key reference
            to another column in a different table that stores ints, then this is not DBNormalized.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.TableAlias">
            <summary>
            The alias of the table for this Row.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.Item(System.String)">
            <summary>
            Gets or Sets the Row Value at a specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.Item(System.Int32)">
            <summary>
            Gets the Row Value at specified column index
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.TransactionCount">
            <summary>
            The number of transactions currently in the queue.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.PrimaryKeyColumn">
            <summary>
            Gets the PrimaryKeyColumn for this Row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.PrimaryKey">
            <summary>
            Returns the ColumnValue of the PrimaryKey of this Row
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.Row.PrimaryKeyValue">
            <summary>
            Returns the Value of the PrimaryKey of this Row
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.Row.TransactionType">
            <summary>
            The Type of SQL Transaction
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.ColumnValue.AssertCorrectValue(System.Object)">
            <summary>
            Ensures that the passed value has the correct type and value
            for the corresponding column
            
            Returns the value (which could have been changed based on the Column's
            Default Value).
            </summary>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.ColumnValue.ToPascalCase">
            <summary>
            If this Row is supposed to be a string and it's not currently NULL,
            changes the Value to PascalCase
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.ColumnValue.ForceNormalizeValue(System.String,System.Object[])">
            <summary>
            Assuming that the corresponding Column is a Foreign Key Column,
            Normalizes the this.Value of ColumnValue by retrieving the reference
            to the other foreign column.
            
            Returns Normalization Result
            </summary>
            <param name="columnGroupNameOfForeignTableForUniqueness">This is the name of the column
            group that will be used to uniquely identify the row in the foreign table that this Value
            must reference</param>
            <param name="valuesForEachColumnInColumnGroup">The values which correspond with the columns in the column group
            as identified by columnGroupNameOfForeignTableForUniqueness. The 0th Value corresponds with the
            0th column, etc.</param>
        </member>
        <member name="M:UtilityData.Database.Rows.ColumnValue.NormalizeValue">
            <summary>
            If this.IsValueDBNormalized is false,
            normalizes the Value of this Row. 
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.ColumnValue.IsValueNormalized">
            <summary>
            Privately determines if this ColumnValue's Value is normalized
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.ColumnValue.Row">
            <summary>
            The row to which this ColumnValue belongs
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ColumnValue.Column">
            <summary>
            The column to which this Row Value belongs
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ColumnValue.IsValueDBNormalized">
            <summary>
            Set when the Value of this ColumnValue changes
            </summary>
        </member>
        <member name="T:UtilityData.Database.ColumnCollection">
            <summary>
            A ColumnCollection is a list of columns.
            The first column in the list (the 0th index) is always the PrimaryKeyColumn.
            </summary>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.#ctor(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column,System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Ensures that no two columns have the same name
            </summary>
            <param name="parent"></param>
            <param name="primaryKeyColumn">The PrimaryKey of the ColumnCollection. This column must have a ColumnType
            of PrimaryKey. It will be the 0th index in the ColumnCollection.</param>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.GetIndexOfColumn(System.String)">
            <summary>
            Gets the index of the column in the collection
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.GetForeignKeyColumnOfTable(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Finds a ForeignKeyColumn in this ColumnCollection that
            references a Column in the specified table.
            
            Throws exception if no foreign key column found.
            </summary>
            <param name="tableDefinition"></param>
            <param name="columnNameIfChoices">The name of the foreign column to choose if there are multiple
            columns that tie to the passed tableDefinition. If this is null or empty, the first column of the applicable
            foreign columns will be chosen.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.TryGetForeignKeyColumnOfTable(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Returns null if no foreign key column was found
            </summary>
            <param name="tableDefinition"></param>
            <param name="columnNameIfChoices"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.TryGetForiegnKeyColumnOfTableSearchDirection(System.Collections.Generic.IEnumerable{UtilityData.Database.Tables.TableDefinition},System.String,System.Boolean)">
            <summary>
            Searches for a foreign key column in all of the given tables.
            If searchForward is true, starts search from the first table to the last.
            If searchForward is false, starts search from the last table to the first.
            
            Returns null if nothing found.
            </summary>
            <param name="tablesInWhichToSearch"></param>
            <param name="columnNameIfChoices"></param>
            <param name="searchForward">Indicates the direction that the tables are sorted (as far as whether each table references
            the next table (forward, true)) or whether each table is referenced by the next table (backward, false))</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.TryGetForiegnKeyColumnOfTableSearchBothDirections(System.Collections.Generic.IList{UtilityData.Database.Tables.TableDefinition},System.String,System.Boolean,System.Boolean@)">
            <summary>
            Searches for a foreign key column both forward and backward through the given tables enumerable.
            
            Starts the search from the front if startSearchForward is true. 
            Starts the search from the back if startSearchForward is false.
            
            Returns null if no foreign key column was found.
            </summary>
            <param name="tablesInWhichToSearch"></param>
            <param name="columnNameIfChoices"></param>
            <param name="startSearchForward">Indicates the direction that the tables are sorted (as far as whether each table references
            the next table (forward, true)) or whether each table is referenced by the next table (backward, false))</param>
            <param name="forwardWorked">If true, searching through the tables forward found the correct foreign key column. If false,
            searching through the tables backward found the correct foreign key column.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.ColumnCollection.GetForeignKeyColumnOfTable(System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.String,System.Boolean,System.Boolean@)">
            <summary>
            Searches through all of the given tables before failing.
            
            Finds a ForeignKeyColumn in this ColumnCollection that
            references a Column in the specified tables.
            
            Throws exception if no column was found.
            </summary>
            <param name="tablesInWhichToSearch"></param>
            <param name="columnNameIfChoices"></param>
            <param name="startSortedForward">Indicates the direction that the tables are sorted (as far as whether each table references
            the next table (forward, true)) or whether each table is referenced by the next table (backward, false))</param>
            <param name="forwardWorked">If true, searching through the tables forward found the correct foreign key column. If false,
            searching through the tables backward found the correct foreign key column.</param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.ColumnCollection.Columns">
            <summary>
            The collection of columns.
            The first Column in this list is ALWAYS the PrimaryKeyColumn.
            </summary>
        </member>
        <member name="P:UtilityData.Database.ColumnCollection.Item(UtilityData.Database.ColumnType)">
            <summary>
            Gets an IEnumerable of all of the Columns that match a specified ColumnType
            </summary>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.ColumnCollection.Item(System.Data.SqlDbType)">
            <summary>
            Gets an IEnumerable of all of the Columns that match the specified SqlDbType (the value type that the Column contains)
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.ColumnCollection.PrimaryKeyColumn">
            <summary>
            Returns the PrimaryKeyColumn (the 0th index column in the ColumnCollection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereIsNotNull(UtilityData.Database.Column)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereIsNull(UtilityData.Database.Column)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereIsNotEqual(UtilityData.Database.Column,System.Object)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Rows.ColumnValue,System.String)">
            <summary>
            Uses the ColumnValue's Column as the WhereColumn
            </summary>
            <param name="value"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Uses the ColumnValue's Column as the WhereColumn
            
            Uses value.Column.TableDefinition.TableAlias
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Column,System.Object)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Column,System.Object,UtilityData.SQL.ISQLVariables.WhereLogicOperator)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <param name="logicOperator"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Column,System.Object,UtilityData.SQL.ISQLVariables.WhereLogicOperator,UtilityData.SQL.ISQLVariables.WhereValueBracket)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <param name="logicOperator"></param>
            <param name="bracket"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.WhereValueEquals(UtilityData.Database.Column,UtilityData.Database.Rows.ColumnValue,UtilityData.SQL.ISQLVariables.WhereLogicOperator,System.String)">
            <summary>
            Where the specified column has a value contained in the specified ColumnValue
            (the ColumnValue's column isn't necessary the whereColumn)
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateWhere(UtilityData.Database.Rows.ColumnValue,System.String)">
            <summary>
            Uses SQLer.WhereValueEquals()
            </summary>
            <param name="columnValue"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateWhere(UtilityData.Database.Column,UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Where Column=Value
            
            Only use this if the SQLElement to which this Where will connect
            has 1 and only 1 Table.
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateWhere(UtilityData.SQL.ISQLVariables.SQLColumn,UtilityData.Database.Rows.ColumnValue)">
            <summary>
            Where Column=Value
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateWhere(UtilityData.SQL.ISQLVariables.SQLColumn,UtilityData.SQL.ISQLVariables.SQLValue)">
            <summary>
            Where Column=Value
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateDelete(UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElement)">
            <summary>
            Uses tableFromWhichToDelete.TableAlias
            </summary>
            <param name="tableFromWhichToDelete"></param>
            <param name="claus"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateSelect(UtilityData.SQL.SQLFunction,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Uses tableFromWhichToSelect.TableAlias
            </summary>
            <param name="function"></param>
            <param name="tableFromWhichToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateSelect(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Creates a SELECT * FROM
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateSelect(UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.SQL.SQLElement)">
            <summary>
            Creates a SELECT * FROM
            </summary>
            <param name="tableFromWhichToSelect"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateSelectAllValue(System.Collections.Generic.IEnumerable{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{System.String})">
            <summary>
            Creates a SelectValue that Seelcts all of the given table's columns.
            </summary>
            <param name="tableDefinition"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateSelectAllValue(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Creates a "Select All" SelectValue for the given table
            </summary>
            <param name="tableDefinition"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateSelectValue(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.String)">
            <summary>
            Assumes that the columns all belong to the same table as specified by the table alias.
            </summary>
            <param name="columnsToSelect"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateSelectValue(UtilityData.Database.Column,System.String)">
            <summary>
            Assumes that the columns all belong to the same table as specified by the table alias.
            </summary>
            <param name="columnToSelect"></param>
            <param name="tableAlias"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateSelectValue(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLColumnOrFunction})">
            <summary>
            Selects the specified columns and/or functions performed on columns
            </summary>
            <param name="columnsOrFunctionsToSelect">the columns or functions</param>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateUpdate(UtilityData.SQL.ISQLVariables.SQLValue,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Updates the specified Column (SQLValue.SQLColumn) with the specified value (SQLValue.Value) in the specified table
            </summary>
            <param name="value"></param>
            <param name="tableToUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateUpdate(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.InsertUpdateValue},UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElement)">
            <summary>
            Uses tableToUpdate.TableAlias
            </summary>
            <param name="values"></param>
            <param name="tableToUpdate"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateInsertUpdateValues(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.ISQLValueOrFunction})">
            <summary>
            This is only for columns that belong to the same tableDefinition
            
            Uses column.TableDefinition.TableAlias
            </summary>
            <param name="columns"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateInsertUpdateValues(UtilityData.Database.Column,System.Object)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="valueOrFunction">Can either be a data value (object) or a SQLFunction.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.CreateInsertUpdateValues(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.List{System.Object})">
            <summary>
            This is only for columns that belong to the same tableDefinition
            
            Uses column.TableDefinition.TableAlias
            </summary>
            <param name="columns"></param>
            <param name="valuesOrFunctions">Each element can either be a data value (object) or a SQLFunction.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateJoin(System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.JoinValue},System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{System.String},UtilityData.SQL.SQLElement)">
            <summary>
            Creates multiple Joins
            
            The main table to which the other tables will be joined should be included in the tablesToJoin list.
            </summary>
            <param name="joinValues"></param>
            <param name="tablesToJoin"></param>
            <param name="tableAliases"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.ConvertToInsertUpdateValues(System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.ColumnValue})">
            <summary>
            This is meant to be used with only 1 Table. Uses each column's tabledefinition's TableAlias
            </summary>
            <param name="columnValues"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateInsert(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.SQLValue},UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElement)">
            <summary>
            Inserts a row with the specified values into the specified table
            </summary>
            <param name="values"></param>
            <param name="tableToWhichToInsert"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GenerateInsert(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.InsertUpdateValue},UtilityData.Database.Tables.TableDefinition,UtilityData.SQL.SQLElement)">
            <summary>
            Uses tableToWhichToInsert.TableAlias
            </summary>
            <returns></returns>
        </member>
        <member name="F:UtilityData.SQL.SQLer.SQLTransactionIsolationLevel">
            <summary>
            The IsolationLevel used in SQL Transactions
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLer.Initialize(System.Boolean)">
            <summary>
            The specific SQLConnection will be opened.
            
            Also initializes SQLTransactionErrorLog
            </summary>
            <param name="sqlConnection"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLer.IsNullOrDBNull(System.Object)">
            <summary>
            Indicates whether a value is NULL or DBNULL.Value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GetAvailableServerNames">
            <summary>
            Retrieves the names of all of the available servers and returns them in a List
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.GetAvailableDatabases(System.String,System.String,System.String,System.Int32)">
            <summary>
            Retrieves the names of all of the available databases given a server to which to connect
            </summary>
            <param name="serverName"></param>
            <param name="userID"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.DetermineValueBaseType(System.Data.SqlDbType)">
            <summary>
            Given an SqlDbType, determines the underlying ValueBaseType
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.ShouldValueBeIsNullStatement(System.Data.SqlDbType,UtilityData.Database.ValueBaseType,System.Boolean,System.Object)">
            <summary>
            Given a value, indicates whether this value should be replaced with "IS NULL"
            </summary>
            <param name="valueType"></param>
            <param name="valueBaseType"></param>
            <param name="canBeNull"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.ToValueOrFunctions(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.SQLColumn})">
            <summary>
            Converts each object to either a SQLValue or a SQLFunction
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.ToValueOrFunctions(System.Object,UtilityData.SQL.ISQLVariables.SQLColumn)">
            <summary>
            Converts the object to either a SQLValue or a SQLFunction
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLer.RawQuery(UtilityData.SQL.SQLConnection,System.String)">
            <summary>
            Executes a Query from a raw string. This method is NOT recommended because it does NOT
            use SqlParameters. Use a SQLElement.
            </summary>
            <param name="SQLConnection"></param>
            <param name="rawQueryString"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.SQLer.Initialized">
            <summary>
            Indicates whether the static SQL class has been initialized by calling the
            Initialize() function
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLer.RecordAllTransactions">
            <summary>
            If true, indicates that all Transaction commands will be recorded
            by the SQLTransactionLogger
            </summary>
        </member>
        <member name="T:UtilityData.Database.TableGroup">
            <summary>
            columns (TableGroupElements)
            a b c d
            
            together, they make up table group 1
            c is a foreign key column
            so replacing it with the foreign columns, you get
            a b { x y z } d
            
            {x y z} are all in table group 2
            However, they ALSO act as a column in table group 1
            
            we need to know this so that while sorting, we don't split up
            table group 1.
            
            
            A TableGroupColumn is a column that belongs to a TableGroupTable
            TableGroupTable is a table that belongs to a TableGroup
            A TableGroup is a group of tables given an identifying TableGroupNumber
            
            A TableGroup contains TableGroupElementsd
            Each of those elements (columns) can itself contain a TableGroup
            Each TableGroup will have a corresponding TableGroupNumber
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroup.JoinTableGroup(UtilityData.Database.TableGroupContainer,System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.WhereValue},System.Collections.Generic.List{UtilityData.Database.TableGroupElement}@)">
            <summary>
            Does not use columnNamesToResolveChoices. To use that, use a different Join overload.
            
            Table Join Types will be determined by each foreign key column's JoinTypeToForeignColumn.
            </summary>
            <param name="whereValues">The table aliases in the WhereValues should appropriately match the
            table aliases in the columnsToSelect (i.e. if any 2 columns belong to the same TableDefinition,
            they should have the same TableAlias).
            
            2nd Item is the TableGroup number</param>
            <param name="columnsToSelect">The table aliases for each corresponding column</param>
            <param name="tableGroups">Key is table group number. Value is list of pairs. A pair of 1. table alias and 2. TableDefinition.</param>
            <returns></returns>
        </member>
        <member name="F:UtilityData.Database.TableGroup.TablesAndAliases">
            <summary>
            Each distinct TableDefinition in this TableGroup (key is TableAlias)
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroup.#ctor(UtilityData.Database.TableGroup)">
            <summary>
            Only use this when cloning
            </summary>
            <param name="TableGroup"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.#ctor(System.Int32)">
            <summary>
            Creates a TableGroup with no elements
            </summary>
            <param name="tableGroupNumber"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.RecalculateTablesAndAliases">
            <summary>
            Clears the TablesAndAliases and adds
            the table definitions back in if applicable.
            
            This should be used when an element in this
            TableGroup is set to a different TableGroup.
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroup.AddTableAndAlias(UtilityData.Database.ITableGroupElement,System.String)">
            <summary>
            Adds the table alias to TablesAndAliases if it doesn't already exist
            for the element's TableDefinition
            </summary>
            <param name="element"></param>
            <param name="tableAlias"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.AddTableAndAlias(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Adds the table alias to TablesAndAliases if it doesn't already exist
            for the specified TableDefinition
            </summary>
            <param name="element"></param>
            <param name="tableAlias"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.AddElement(UtilityData.Database.ITableGroupElement,System.String)">
            <summary>
            Adds an element to the end of the elements in this tableGroup
            </summary>
            <param name="element"></param>
            <param name="tableAlias"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.InsertElements(System.Int32,System.Collections.Generic.IEnumerable{UtilityData.Database.ITableGroupElement},System.Collections.Generic.List{System.String})">
            <summary>
            Inserts a set of TableGroupElement into this TableGroup
            </summary>
            <param name="element"></param>
            <param name="tableAlias">The table alias to assign to the tableDefinition of the 
            given element</param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GetTableDefinitionsAndAliasesAtRootLevel">
            <summary>
            Gets all of the table definitions and aliases at the root level of this table group
            (meaning that it does not get any table definitions or aliases from any children table groups)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GetAllTableDefinitionsAndAliases">
            <summary>
            Gets all of the TableDefinitions (with distinct aliases) for this 
            TableGroup and all child table groups.
            
            Two of the same TableDefinition might be returned if they have 2 different table aliases.
            
            Value is the table definition alias.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GetAllChildTableDefinitionsAndAliases">
            <summary>
            Gets all of the TableDefinitions (with distinct aliases) in all child table groups.
            
            Value is the table definition alias.
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GetTableDefinitionsForCurrentElements">
            <summary>
            Gets the distinct TableDefinitions for all of the current elements in
            this TableGroup
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.HasReferenceTo(UtilityData.Database.ITableGroupElement,UtilityData.Database.ITableGroupElement)">
            <summary>
            Indicates whether the first TableGroupElement's TableDefinition
            has a reference to the second TableGroupElement's TableDefinition.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.MoveElements(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,System.Func{UtilityData.Database.ITableGroupElement,System.Boolean})">
            <summary>
            Adds the affected elements to the end of the "to" table group
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.MoveElements(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,System.Collections.Generic.List{UtilityData.Database.ITableGroupElement}@,System.Int32,System.Func{UtilityData.Database.ITableGroupElement,System.Boolean})">
            <summary>
            Moves all of the elements that satisfy the given predicate
            from the "from" tableGroup to the "to" tableGroup.
            Elements are removed from the "from" tableGroup.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="affectedElements">The elements that are affected by the </param>
            <param name="insertAtIndex">The index at which to insert the affected elements</param>
        </member>
        <member name="M:UtilityData.Database.TableGroup._groupTableGroupMoveReferences(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,System.Int32,System.Int32@,UtilityData.Database.ITableGroupElement)">
            <summary>
            Moves the specified element and its table set from tableGroupToGroup to groupedTableGroup.
            Also goes into each element that REFERENCES the table set of the elementToMove and moves those elements.
            </summary>
            <param name="tableGroupSource">The table group to group</param>
            <param name="groupedTableGroup"></param>
            <param name="elementToMove"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup._groupTableGroupMoveReferenced(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,UtilityData.Database.ITableGroupElement)">
            <summary>
            Moves the specified element and its table set from tableGroupToGroup to groupedTableGroup.
            Also goes into each element that is REFERENCED by the table set of the elementToMove.
            </summary>
            <param name="tableGroupToGroup"></param>
            <param name="groupedTableGroup"></param>
            <param name="elementToMove"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GroupTableGroup">
            <summary>
            Groups all of the elements at the root level of this TableGroup by their
            tableDefinition. Returns the grouped table group.
            
            Ensures that all of the elements with tables that are REFERENCED appear
            toward the beginning of the group
            </summary>
            <param name="groupedTableGroup"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.IdentifyNumberReferencedInThisTableGroup(UtilityData.Database.TableGroup,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Determines how many TableDefinitions in the given TableGroup are referenced
            by the given tableDefinition
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.IdentifyTableWithMostReferenced(UtilityData.Database.TableGroup,System.Boolean,System.String@)">
            <summary>
            
            
            Returns null if none of the elements' table definitions have references to other
            tables in the specified tableGroup.
            </summary>
            <param name="referenced">If true, Identifies the tableDefinition in this TableGroup with the 
            most references to other tableDefinitions
            in the specified tableGroup. 
            If false, Identifies the tableDefinition in the specified TableGroup with the 
            most references to other tableDefinitions
            in this tableGroup</param>
            <returns>Table with most references to other tables along with its table alias</returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.PrepareJoinValuesForElements">
            <summary>
            Returns a list of TableGroups that are needed to process the
            elements in this TableGroup. (Some of the elements may have needed to
            be in a different Join statement and that's why they're in a different
            TableGroup).
            Creates JoinValues for the table groups.
            
            Once we have the results of this function, we'll have a list of table groups.
            Each of these table groups will have a separate join statement altogether (they will
            not need to talk to any of the other table groups in the list).
            Within a tableGroup, the elements will be ordered in such a way so that 
            Each grouped set of table definitions will be referenced by the next grouped set of table definitions
            The first element of each set of table definitions will have a JoinValue to the previous set of
            table definitions.
            From there, the sets of tableDefinitions within a TableGroup can be joined
            
            This method's only purpose is to create join values for those elements at the ROOT level. The
            children should already have join values.
            </summary>
            <returns>Dictionary where key is the TableGroup that has all of the join values created. Value is
            the TableDefinition from which to Select to use with the Join Element (i.e. the main table to select)</returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.MakeJoinValuesForTableGroup(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Attempts to join a set of elements with the same table definition in groupedTableGroup
            to a different set of elements (but with all of those different elements having
            a same table definition).
            Does for all sets of elements possible.
            
            After this creation of join values is completed, all of the elements that have tableDefinitions
            that are relate-able can be found in tableGroupReadyForJoining.
            Those same elements are removed from groupedTableGroup.
            
            
            Returns the main table from which to select when using the JoinElement
            </summary>
            <param name="groupedTableGroup"></param>
            <param name="completedElementsTableGroup"></param>
            <param name="mainTable"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.PrepareTableSetForJoin(UtilityData.Database.TableGroup@,UtilityData.Database.TableGroup@,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Creates a JoinValue for tableOfTableSet to join it to tableToWhichToJoin.
            Then Moves all elements with the tableOfTableSet TableDefinition from
            the groupedTableGroup to the completedElementsTableGroup
            </summary>
            <param name="groupedTableGroup"></param>
            <param name="completedElementsTableGroup"></param>
            <param name="tableOfTableSet"></param>
            <param name="tableToWhichToJoin"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.NeedsChangedJoinType(UtilityData.Database.ITableGroupElement,UtilityData.SQL.JoinType@)">
            <summary>
            Determines whether the join type of the element needs to be changed based on its parents
            join value. If returning true, the necessary join type will be out'd in joinType.
            </summary>
            <param name="elementParent">The PARENT of the element (not the element)</param>
            <param name="joinType"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.SetJoinValue(UtilityData.Database.Column,System.String)">
            <summary>
            Sets this TableGroup's JoinValue that ties this TableGroup to the specified foreign key.\
            </summary>
            <param name="foreignKey"></param>
            <param name="foreignKeyTableAlias">This can be set to null if this TableGroup will later
            be added as an element of a different TableGroup. The alias will be set appropriately when
            it is added as an element at a later time.</param>
        </member>
        <member name="M:UtilityData.Database.TableGroup.GetJoinValuesOfChildren(System.Collections.Generic.List{System.String}@)">
            <summary>
            
            </summary>
            <param name="tableAliasesProcessedThusFar">The table aliases that for any foreign tables that
            have been joined thus far
            
            The table aliases of the children will be added as processed</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroup.CreateJoinElement(UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.SQL.SQLElement)">
            <summary>
            Creates a JoinElement to join all of the elements in this TableGroupContainer
            </summary>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.TableGroup.TableGroupElements">
            <summary>
            The TableGroupElements that belong
            to this TableGroup.
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.TableDefinitions">
            <summary>
            The TableDefinitions that are parents to the columns in this TableGroup
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.JoinValue">
            <summary>
            The JoinValue to join this TableGroup's TableDefinition to a foreign key
            in a different TableDefinition 
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.Count">
            <summary>
            The number of elements in this TableGroup
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.IsContainer">
            <summary>
            If true, indicates that this TableGroup is the ContainingTableGroup used by
            the TableGroupContainer. It's sole purpose is to be the single container
            of other TableGroups.
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.FirstTableDefinition">
            <summary>
            Returns null if there are no TableDefinitions
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.LastTableDefinition">
            <summary>
            Returns null if there are no TableDefinitions
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.TableDefinition">
            <summary>
            This is the TableDefinition of this TableGroup's
            first element.
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.Item(System.Int32)">
            <summary>
            Retrieves a TableGroupElement
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.TableGroup.LastElement">
            <summary>
            The last ITableGroupElement in this TableGroup
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroup.ElementsThatAreTableGroups">
            <summary>
            Gets an IEnumerable of all of the elements that are TableGroups
            </summary>
        </member>
        <member name="M:UtilityData.HTML.HTMLer.ToHTMLTable(System.Data.DataTable)">
            <summary>
            Converts the specified dataTable into 
            HTML code that shows the data in the table
            
            http://www.w3schools.com/html/html_tables.asp
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.HTML.HTMLer.ReplaceWithHTMLBreak(System.String)">
            <summary>
            Given a string, changes all of the newline characters "\n"
            to the equivalent break in HTML.
            </summary>
            <param name="stringToAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.HTML.HTMLer.ReplaceWithHTMLTab(System.String)">
            <summary>
            Given a string, changes all of the tab characters "\t"
            to the equivalent tab in HTML.
            </summary>
            <param name="stringToAdjust"></param>
            <returns></returns>
        </member>
        <member name="T:UtilityData.HTML.HTMLer.HeaderRating">
            <summary>
            The lower the rating, the bigger the header.
            One is the biggest. Six is the smallest.
            </summary>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.RemoveWhere``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Removes the elements in the source dictionary that satisfy the given
            condition.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.RemoveWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes the elements in the source that satisfy the given condition
            and returns the new IEnumerable without those elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToSingleString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns the given IEnumerable of chars as a string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContentsWithCommas(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the contents of a given string IEnumerable with commas (", ").
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContents(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the contents of a given string IEnumerable with no characters
            separating them.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContents(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            Concatenates the contents of a given string IEnumerable with no characters
            separating them.
            </summary>
            <param name="source"></param>
            <param name="action">The action to perform on each string before concatenating it.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContentsWithCommas(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            Concatenates the contents of a given string IEnumerable with commas (", ").
            Performs an action on each of the elements before they are concatenated.
            </summary>
            <param name="source"></param>
            <param name="action">The action to perform on each string before concatenating it.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContentsWithCharacters(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the contents of a given string IEnumerable with commas the specified characters.
            Performs an action on each of the elements before they are concatenated.
            </summary>
            <param name="source"></param>
            <param name="charactersBetweenElements"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ConcatContentsWithCharacters(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.String)">
            <summary>
            Concatenates the contents of a given string IEnumerable with commas the specified characters.
            Performs an action on each of the elements before they are concatenated.
            </summary>
            <param name="source"></param>
            <param name="action">The action to perform on each string before concatenating it.</param>
            <param name="charactersBetweenElements">If this string is ", " then each element will be concatenated with
            ", " in between them.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToColumnValue(System.Object,UtilityData.Database.Column,System.String)">
            <summary>
            Allows an object to be converted to a ColumnValue, given a TableDefinition.
            The returned ColumnValue is listed as belonging to the specified column
            </summary>
            <param name="source"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.RegisterError(System.Exception,UtilityData.Log.SenderIdentifier)">
            <summary>
            Registers the specified exception as an error with the Logger using
            the specified SenderIdentifier
            </summary>
            <param name="ex"></param>
            <param name="senderIdentifier"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SafeInvoke``2(System.Func{``0,``1},``0,UtilityData.Log.SenderIdentifier)">
            <summary>
            Invokes the specified function with a try, catch block
            around the function so that any exceptions will be caught
            and not thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="arg"></param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SafeInvoke``1(System.Action{``0},``0,UtilityData.Log.SenderIdentifier)">
            <summary>
            Invokes the specified action with a try, catch block
            around the action so that any exceptions will be caught
            and not thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="arg"></param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered</param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.IsFurtherInPastThan(System.DateTime,System.DateTime)">
            <summary>
            Indicates whether the source DateTime is further in 
            the past than the provided otherDateTime.
            </summary>
            <param name="source"></param>
            <param name="otherDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToLongDateWithoutWeekDay(System.DateTime)">
            <summary>
            Returns the specified DateTime as its LongDateString 
            (e.g. "Wednesday, May 16, 2001")
            but without the Weekday so the result would look like
            "May 16, 2001".
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.First(System.String,System.Int32)">
            <summary>
            Returns the first n characters of a string (as a string).
            If the string is less than the character count, the entire string will be returned.
            </summary>
            <param name="source"></param>
            <param name="characterCount"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Last(System.String,System.Int32)">
            <summary>
            Returns the last n characters of a string (as a string).
            If the string is less than the character count, the entire string will be returned.
            </summary>
            <param name="source"></param>
            <param name="characterCount"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Indicates whether the source string equals the other string.
            Both strings are converted to lower case before comparing.
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.NotEqualsIgnoreCase(System.String,System.String)">
            <summary>
            Indicates whether the source string does NOT equal the other string.
            Both strings are converted to lower case before comparing.
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Indicates whether the source string contains the other string.
            Both strings are converted to lower case before comparing.
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SplitTrim(System.String,System.Char)">
            <summary>
            Splits the source string by the splitCharacter and trims the resulting 
            strings and returns them in a list.
            </summary>
            <param name="source"></param>
            <param name="splitCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SplitTrim(System.String,System.Char,System.Func{System.String,System.String})">
            <summary>
            Splits the source string by the splitCharacter and trims the resulting 
            strings and returns them in a list.
            
            Performs the specified action on each string after it is split out of the source string
            and before it is added to the resulting list.
            </summary>
            <param name="source"></param>
            <param name="splitCharacter"></param>
            <param name="action">action to perform on each string after it is split out of the source string and
            before it is added to the resulting list.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ExcludingStartingText(System.String,System.String)">
            <summary>
            Excludes the specified text IF it appears at the beginning of this string.
            Returns the new string.
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ReplaceDiacritics(System.String)">
            <summary>
            Removes all accent marks from the source string and replaces them
            with their equivalent.
            
            For instance, if there is an "a" with an accent mark in the source
            string, it will be replace with an "a" without an accent mark.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Between(System.String,System.String,System.String)">
            <summary>
            Gets the text in the source string that falls between the specified "start" and "end"
            
            Returns null if the start or end could not be found in the string.
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SubstringBefore(System.String,System.String)">
            <summary>
            Gets a substring of the source string starting from the beginning until 
            the first instance of the given str.
            Returns null if no instance of the given str.
            </summary>
            <param name="source"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.GetOnlyUppercaseLetters(System.String)">
            <summary>
            Returns only the Uppercase letters of a string. If given "MunicipalityChildRow",
            will return "MCR"
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SplitByPascalCase(System.String)">
            <summary>
            Splits the given string (such as "MunicipalityChildRow") to
            its individual pascal case words (such as "Municipality Child Row")
            in an array.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToStringSplitByPascalCase(System.String)">
            <summary>
            Splits the given string (such as "MunicipalityChildRow") to
            its individual pascal case word (such as "Municipality Child Row")
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToPropertyName(System.String)">
            <summary>
            Normalizes the given string so that it can be used as PropertyName.
            
            (for instance "in-default" would be changed to "InDefault")
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.IsUpperCase(System.String)">
            <summary>
            Indicates whether the source string is completely upper case
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.LowerFirstChar(System.String)">
            <summary>
            Returns a new string with the first character in the source string lowered.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToNoSpaceLowerString(System.Object)">
            <summary>
            Returns the object as a lowered string with no whitespace
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToTrimmedLowerString(System.Object)">
            <summary>
            Returns source.ToString().Trim().ToLower()
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDate(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a DateTime. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDateNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a DateTIme. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToBool(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a boolean. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToBoolNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a bool. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDouble(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a double. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDoubleNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a double. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToInt(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to an integer. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToIntNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to an integer. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToFloat(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a float. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToFloatNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a float. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDecimal(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a decimal. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDecimalNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a decimal. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToShort(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a short. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToShortNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a short. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToChar(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a char. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToCharNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a char. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToLong(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a long. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToLongNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a long. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToByte(System.Object)">
            <summary>
            Converts the source object to a string and then
            parses it to a byte. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToByteNullable(System.Object)">
            <summary>
            Returns null if the given source is null.
            
            Otherwise, Converts the source object to a string and then
            parses it to a byte. Fails if source cannot
            be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToEnum``1(System.Object)">
            <summary>
            Converts the source object to an Enum of the specified type and then
            Fails if source cannot be converted.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Serialize(System.Object,System.String)">
            <summary>
            Serializes the source object to the specified file path.
            If the file already exists, it will be overwritten.
            <para></para>Uses binary serializer.
            </summary>
            <param name="source"></param>
            <param name="filePath">the full path of the (including file name)</param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the source object to the specified Stream.
            <para></para>Uses binary serializer.
            <para></para>
            <para></para>To write the object to a file, use a FileStream
            </summary>
            <param name="source"></param>
            <param name="stream"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Deserialize``1(``0,System.String)">
            <summary>
            Deserializes the data from the given file and returns it as the specified type.
            <para></para>Uses binary serializer.
            <para></para>
            <para></para>The file MUST exist.
            </summary>
            <param name="source"></param>
            <param name="filePath">the full path of the (including file name)</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Deserialize``1(``0,System.IO.Stream)">
            <summary>
            Deserializes the data in the given stream and returns it as the specified type.
            <para></para>Uses binary serializer.
            <para></para>
            <para></para>To get the information from a file, use a FileStream.
            </summary>
            <param name="source"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.RemoveDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list with no duplicate elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.MakeColumnsInvisible(System.Windows.Forms.DataGridView,UtilityData.Database.Column[])">
            <summary>
            Makes all of the specified columns in the dataGridView invisible.
            </summary>
            <param name="dataGridView"></param>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.MakeColumnsInvisible(System.Windows.Forms.DataGridView,System.String[])">
            <summary>
            Makes all of the specified columns in the dataGridView invisible.
            </summary>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.MakeColumnsVisible(System.Windows.Forms.DataGridView,UtilityData.Database.Column[])">
            <summary>
            Makes all of the specified columns in the dataGridView visible.
            </summary>
            <param name="dataGridView"></param>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.MakeColumnsVisible(System.Windows.Forms.DataGridView,System.String[])">
            <summary>
            Makes all of the specified columns in the dataGridView visible.
            </summary>
            <param name="dataGridView"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.AddRow(System.Data.DataTable,UtilityData.Database.Rows.StrongRowColumn[])">
            <summary>
            Adds the values in the specified columns as a row in the source DataTable.
            
            The source DataTable should have enough columns to support all of the given columns.
            </summary>
            <param name="source"></param>
            <param name="strongRowColumns"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.FromExcelFile(System.String)">
            <summary>
            Parses a DataTable from the first worksheet in the specified Excel file
            and returns it.
            </summary>
            <param name="excelFile">File path and name. Should contain the excel file extension.</param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.CombineTwoColumns(System.Data.DataTable,System.String,System.String,System.String,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Combines the two specified columns and creates a new column in the place of the first column.
            Returns the new Data Table.
            </summary>
            <param name="source"></param>
            <param name="firstColumnName">The name of the first of the two columns that will be combined</param>
            <param name="combiner">The function that will take the value from the first column and second column and return the value for the new, combined column.</param>
            <param name="secondColumnName">The name of the second of the two columns that will be combined</param>
            <param name="newColumnName">The name of the new, combined column.</param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.AddColumnsToOtherTable(System.Data.DataTable,System.Data.DataTable@)">
            <summary>
            Adds the columns from the source DataTable to the otherTable. (Does not
            remove the columns from the source).
            </summary>
            <param name="source"></param>
            <param name="otherTable"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToDataTable(System.Data.DataSet,System.String)">
            <summary>
            Converts the DataTables within a DataSet to one single DataTable.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.GetRowData(System.Collections.Generic.IEnumerable{System.Data.DataTable})">
            <summary>
            For each table, gets its row data (as a List of objects)
            and adds it to an IEnumerable. The 0th element of the returned IEnumerable corresponds
            to the 0th given table.
            </summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Use this when the results NEED to be in the same order as the source elements
            but the selector needs to be performed in parallel.
            
            Only use this if the selector is intensive and is worth running in parallel. 
            Otherwise, it's probably better not to run the selector in parallel because
            this function moves the elements back and forth between dictionaries.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer._parallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean,UtilityData.Log.SenderIdentifier)">
            <summary>
            Use this when the results NEED to be in the same order as the source elements
            but the selector needs to be performed in parallel.
            
            Only use this if the selector is intensive and is worth running in parallel. 
            Otherwise, it's probably better not to run the selector in parallel because
            this function moves the elements back and forth between dictionaries.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="catchExceptions">If true, the Selector function will be surrounded
            by a try, catch block and no exceptions will be thrown.</param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered (if catchExceptions is true)</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invokes the specified action on every element in the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <param name="arg"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SafeSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},UtilityData.Log.SenderIdentifier)">
            <summary>
            Invokes the specified Select function with a try, catch block
            around the function so that any exceptions will be caught
            and not thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SafeParallelSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},UtilityData.Log.SenderIdentifier)">
            <summary>
            Use this when the results NEED to be in the same order as the source elements
            but the selector needs to be performed in parallel.
            
            Surrounds every Select function invocation with a try, catch block
            so that no exceptions are thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SafeParallelForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},UtilityData.Log.SenderIdentifier)">
            <summary>
            Invokes the specified action on every element in the source in parallel.
            
            Surrounds every Select action invocation with a try, catch block
            so that no exceptions are thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <param name="senderIdentifier">Used to register with the Logger any exceptions that are encountered</param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ParallelForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invokes the specified action on every element in the source
            in parallel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.GetIndexes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list of indexes of an IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the first element of an index in an IEnumerable that matches the given element.
            
            Begins the search at the 0th index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Returns the first element of an index in an IEnumerable that matches the given element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="element"></param>
            <param name="startIndex">The index at which to start the search</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.Add``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds the specified element to the source IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified range of elements to the source IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="elements"></param>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.RemoveAll``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Removes all of the specified items from the given source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="itemsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.AddAndReturn``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds the specified element to this List and returns this List with the added element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.AddRangeAndReturn``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified range to this List and returns this List with the added range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.SortStringKeyDescending``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            For a dictionary with a string key, sorts the key descending by its length.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ToIEnumerablePair``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Takes 2 IEnumerables and returns 1 IEnumerable which contains pairs of each corresponding element
            from the 2 source IEnumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="source"></param>
            <param name="source2"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the source contains any elements from the other IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.LINQ.LINQer.IndexOfHighest(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the index of the element that has the highest value in the source.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.QueryResult">
            <summary>
            The result of a database query.
            
            Allows Enumeration over the Rows in the resulting FirstTable
            </summary>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetColumnDataToString(UtilityData.Database.Column)">
            <summary>
            Sets the DataType of the specified column in the FirstTable to String
            
            This is computationally-intensive. Only do this if necessary.
            </summary>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetColumnDataToString(System.String)">
            <summary>
            Sets the DataType of the specified column in the FirstTable to String
            
            This is computationally-intensive. Only do this if necessary.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetColumnDataToString(System.Int32,System.String)">
            <summary>
            Sets the DataType of the specified column in the specified DataTable to String.
            
            This is computationally-intensive. Only do this if necessary.
            </summary>
            <param name="dataTableIndex"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(UtilityData.Database.Column,System.Object,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the specified value
            for all the rows in the FirstTable that match the specified predicate.
            </summary>
            <param name="column"></param>
            <param name="newValue"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(System.String,System.Object,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the specified value
            for all the rows in the FirstTable that match the specified predicate.
            </summary>
            <param name="rowColumnName"></param>
            <param name="newValue"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(System.Int32,System.String,System.Object,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the specified value
            for all the rows in the specified dataTable that match the specified predicate.
            </summary>
            <param name="newValue"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(UtilityData.Database.Column,System.Func{System.Data.DataRow,UtilityData.SQL.SQLElementBase},System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the value that results from the specified queryForValue.
            This is applicable for only those rows in the FirstTable that match the specified predicate.
            </summary>
            <param name="queryForValue">The query must return 1 row with 1 value. If more than 1 row is returned or more than 1 value is returned, an
            exception will be thrown.</param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(System.String,System.Func{System.Data.DataRow,UtilityData.SQL.SQLElementBase},System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the value that results from the specified queryForValue.
            This is applicable for only those rows in the FirstTable that match the specified predicate.
            </summary>
            <param name="rowColumnName"></param>
            <param name="queryForValue">The query must return 1 row with 1 value. If more than 1 row is returned or more than 1 value is returned, an
            exception will be thrown.</param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.UpdateColumnWhere(System.Int32,System.String,System.Func{System.Data.DataRow,UtilityData.SQL.SQLElementBase},System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Updates the specified column with the value that results from the specified queryForValue.
            This is applicable for only those rows in the specified dataTable that match the specified predicate.
            </summary>
            <param name="dataTableIndex"></param>
            <param name="rowColumnName"></param>
            <param name="queryForValue">The query must return 1 row with 1 value. If more than 1 row is returned or more than 1 value is returned, an
            exception will be thrown.</param>
            <param name="predicate"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetHeaderText(System.String[])">
            <summary>
            Changes the header text of the first DataTable with the
            specified columnHeaders
            </summary>
            <param name="columnHeaders"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetHeaderText(System.Collections.Generic.List{System.String})">
            <summary>
            Changes the header text of the first DataTable with the
            specified columnHeaders
            </summary>
            <param name="columnHeaders"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.SetHeaderText(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Changes the header text of the specified DataTable with the
            specified columnHeaders
            </summary>
            <param name="dataTableIndex"></param>
            <param name="columnHeaders"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFilteredFirstTable(System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Gets a DataTable of only the specified columns in the FirstTable of this QueryResult.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFilteredFirstTable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a DataTable of only the specified columns in the FirstTable of this QueryResult.
            </summary>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFirstTableExceptColumns(UtilityData.Database.Column[])">
            <summary>
            Gets a DataTable of all columns in the FirstTable EXCEPT the specified columns.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFirstTableExceptColumns(System.Collections.Generic.IEnumerable{UtilityData.Database.Column})">
            <summary>
            Gets a DataTable of all columns in the FirstTable EXCEPT the specified columns.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFirstTableExceptColumns(System.String[])">
            <summary>
            Gets a DataTable of all columns in the FirstTable EXCEPT the specified columns.
            </summary>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetFirstTableExceptColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a DataTable of all columns in the FirstTable EXCEPT the specified columns.
            </summary>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.RowsWhere(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Returns all of the DataRows (in the first DataTable)
            where the specified column has any of the specified values
            </summary>
            <param name="columnName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.RowsWhere(System.Func{System.Data.DataRow,System.Boolean})">
            <summary>
            Returns all of the DataRows (in the first DataTable)
            where a DataRow meets the specified predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetUniqueNonNullValuesInColumn(System.String)">
            <summary>
            Gets all of the unique values in the specified column that are
            not Null
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetUniqueNonNullValuesInColumn(UtilityData.Database.Rows.StrongRowColumn,System.Boolean)">
            <summary>
            Gets all of the unique values in the specified column that are
            not Null.
            </summary>
            <param name="column"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetValuesInColumn(System.Int32)">
            <summary>
            Gets the values in a specified column of the first DataTable
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetValuesInColumn(System.Int32,System.Int32)">
            <summary>
            Gets the values in a specified column of the specified dataTable
            </summary>
            <param name="dataTableIndex"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetValuesInColumn(UtilityData.Database.Column)">
            <summary>
            Gets the values in a specified column of the first DataTable
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetValuesFromTwoColumns(UtilityData.Database.Column,UtilityData.Database.Column)">
            <summary>
            Retrieves the values in 2 columns as an Enumerable of Tuples that each contain a value from each of the
            two rows.
            Retrieves from the first table.
            </summary>
            <param name="columnOne"></param>
            <param name="columnTwo"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.GetValuesFromTwoColumns(System.Int32,System.String,System.String)">
            <summary>
            Retrieves the values in 2 columns as an Enumerable of Tuples that each contain a value from each of the
            two rows.
            Retrieves from the specified table.
            </summary>
            <param name="dataTableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractJoinedRows(UtilityData.Database.Tables.TableDefinition[])">
            <summary>
            
            </summary>
            <param name="schemaForData">The tableDefinitions of all of the rows of the JoinedRow as they appear
            sequentially in the resulting First DataTable.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractJoinedRows(System.Collections.Generic.Dictionary{UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column[]})">
            <summary>
            
            </summary>
            <param name="schemaForData">The data schema for each row as it appears sequentially in the First DataTable.
            The first key should be the TableDefinition of the first row and the columns in that row.
            The second key should be the TableDefinition of the second row (that appears to the right of the columns
            of the first row in the First DataTable).</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ToRow(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Converts the first DataRow in the first DataTable to a Row
            </summary>
            <param name="schemaForData">The columns of this TableDefinition should
            correspond exactly with the data in the dataTable of this QueryResult</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ToRow(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column[])">
            <summary>
            Converts the first DataRow in the first DataTable to a Row
            </summary>
            <param name="tableDefinition">The TableDefinition of the row</param>
            <param name="schemaForData">The columns as they appear in the DataTable (they should
            all belong to the given tableDefinition but not all of the tableDefinition columns
            need be provided--only the ones in the dataTable).</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRow(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Extracts a row from the first row of the first table
            according to the given rowSchema (the tableDefinition of the row).
            </summary>
            <param name="rowSchema"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRow(UtilityData.Database.Tables.TableDefinition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Extracts a row from the first row of the first table
            according to the given rowSchema (the tableDefinition of the row).
            
            Uses the specified column names in order to find the columns in the first Data Table.
            </summary>
            <param name="rowSchema"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRow(System.Int32,System.Int32,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Extracts a row from the specified dataRow in the specified dataTable
            according to the given rowSchema (the tableDefinition of the row).
            
            Assumes the column names in the specified DataTable are the same as those
            in the TableDefinition.
            </summary>
            <param name="dataRowIndex"></param>
            <param name="dataTableIndex"></param>
            <param name="rowSchema"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRow(System.Int32,System.Int32,UtilityData.Database.Tables.TableDefinition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Extracts a row from the specified dataRow in the specified dataTable
            according to the given rowSchema (the tableDefinition of the row).
            
            Uses the specified column names in order to find the columns in the specified
            Data Table.
            </summary>
            <param name="dataRowIndex"></param>
            <param name="dataTableIndex"></param>
            <param name="rowSchema"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRow(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Extracts a row from the specified dataRow in the specified dataTable
            according to the given columnNames. The resulting row will contain values
            for the specified columns.
            
            </summary>
            <param name="dataRowIndex"></param>
            <param name="rowSchema"></param>
            <param name="columns">The columns that will be populated in the returned row. All of the specified columns must belong to the same Table Definition.</param>
            <param name="columnNames">The name of the columns as they appear in the specified data table</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRows(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Extracts a row collection from all of the DataRows in the FirstTable
            according to the given rowSchema (the tableDefinition of the row).
            </summary>
            <param name="rowSchema"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractRows(System.Int32,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Extracts a row collection from all of the DataRows in the specified dataTable
            according to the given rowSchema (the tableDefinition of the row).
            </summary>
            <param name="dataTableIndex"></param>
            <param name="rowSchema"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowsWhere``1(System.Func{System.Data.DataRow,System.Boolean},System.Boolean)">
            <summary>
            Extracts the StrongRows from the FirstTable where the specified predicate is met.
            </summary>
            <param name="predicate"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowsWhere``1(System.Int32,System.Func{System.Data.DataRow,System.Boolean},System.Boolean)">
            <summary>
            Extracts the StrongRows from the specified dataTable where the specified predicate is met.
            </summary>
            <param name="predicate"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowsWhere``1(UtilityData.Database.Rows.StrongRowColumn,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Extracts the StrongRows from the FirstTable where the value in the specified "column" contains any of the specified "possibleValues"
            </summary>
            <param name="column">The column that will hold the value to check against the given list of "possibleValues"</param>
            <param name="possibleValues">If a value in the given column is contained in this possibleValues, the row will be extracted.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowsWhere``1(System.Int32,UtilityData.Database.Rows.StrongRowColumn,System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Extracts the StrongRows from the specified dataTable where the value in the specified "column" contains any of the specified "possibleValues"
            </summary>
            <param name="column">The column that will hold the value to check against the given list of "possibleValues"</param>
            <param name="possibleValues">If a value in the given column is contained in this possibleValues, the row will be extracted.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <param name="dataTableIndex">The index of the table from which the rows will be extracted</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowDataTable``1(System.Boolean)">
            <summary>
            Extracts all of the data from the first DataTable that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a DataTable with the column names of the
            columns in the StrongRow Type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRowDataTable``1(System.Boolean,UtilityData.Database.StrongRowDataTableColumn[])">
            <summary>
            Extracts all of the data from the first DataTable that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a DataTable with the column names of the
            columns in the provided columns.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnsInDataTable">The columns that will be extracted from each StrongRow and will show in the DataTable</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRows``1(System.Boolean)">
            <summary>
            Extracts all of the data from the first DataTable that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a StrongRowCollection.
            
            Sets each StrongRow's HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <typeparam name="T">The type of the StrongRow to extract. An instance of this type will
            be extracted and returned.</typeparam>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRows``1(System.Int32,System.Boolean)">
            <summary>
            Extracts all of the data from the specified DataTable that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a StrongRowCollection.
            
            Sets each StrongRow's HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <typeparam name="T">The type of the StrongRow to extract. An instance of this type will
            be extracted and returned.</typeparam>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRow``1(System.Boolean)">
            <summary>
            Extracts any data from the first row in the first table that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a StrongRow.
            
            Sets HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <typeparam name="T">The type of the StrongRow to extract. An instance of this type will
            be extracted and returned.</typeparam>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRow``1(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Extracts any data from the specified dataRow and dataTable that belongs
            to the specified StrongRow type (as identified by the strongRow's tableAlias).
            Returns the results of the extraction as a StrongRow.
            
            Sets HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <typeparam name="T">The type of the StrongRow to extract. An instance of this type will
            be extracted and returned.</typeparam>
            <param name="dataRowIndex"></param>
            <param name="dataTableIndex"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRow``1(``0@,System.Boolean)">
            <summary>
            Extracts the data from the first row in the first table that
            belongs to the given StrongRow into the given StrongRow.
            
            If one of the column's contents belongs to a child of the given strongRow, the child
            will be initialized and filled.
            
            Sets HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <param name="rootStrongRow"></param>
        </member>
        <member name="M:UtilityData.Database.QueryResult.ExtractStrongRow``1(System.Int32,System.Int32,``0@,System.Boolean)">
            <summary>
            Extracts any data from the specified dataRow and dataTable that belongs
            to the given strongRow into the given StrongRow.
            
            If one of the column's contents belongs to a child of the given strongRow, the child
            will be initialized and filled.
            
            Sets HasAnyRowValueChanged and HasAnyRowValueOrChildRowValueChanged to false.
            </summary>
            <param name="dataRowIndex"></param>
            <param name="dataTableIndex"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <param name="rootStrongRow">This must be the root StrongRow for which the values will be filled with the
            values in the columns of the specified row and table.</param>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Result">
            <summary>
            The DataSet result of the query
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstTable">
            <summary>
            The first DataTable in the resulting DataSet
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstRow">
            <summary>
            The first DataRow of the first DataTable of the resulting DataSet
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstValue">
            <summary>
            The first object in the first DataRow of the first DataTable of
            the resulting DataSet.
            
            Returns null if no rows were returned.
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstTwoValues">
            <summary>
            The first two objects in the first DataRow of the first DataTable of
            the resulting DataSet.
            
            Returns null if no rows were returned.
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstThreeValues">
            <summary>
            The first three objects in the first DataRow of the first DataTable of
            the resulting DataSet.
            
            Returns null if no rows were returned.
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.RowCount">
            <summary>
            The number of rows in the First Table
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Rows">
            <summary>
            The rows of the FirstTable
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.RowsList">
            <summary>
            A list of rows in the FirstTable
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.FirstColumnValues">
            <summary>
            Gets the values in the first column of the first DataTable
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.ColumnCount">
            <summary>
            The number of columns in the FirstTable.
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Columns">
            <summary>
            The Data Columns in the FirstTable
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.IsEmpty">
            <summary>
            Indicates whether this QueryResult is empty (i.e. there are no rows in the FirstTable or there
            are no tables).
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.HasSingleRow">
            <summary>
            Indicates whether the FirstTable has one single row
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.HasMultipleRows">
            <summary>
            Indicates whether the FirstTable has multiple rows
            </summary>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Item(UtilityData.Database.Column)">
            <summary>
            Gets the value in the FirstRow of the FirstTable at
            the specified Column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Item(System.String)">
            <summary>
            Gets the value in the FirstRow of the FirstTable at
            the specified column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.QueryResult.Item(System.Int32)">
            <summary>
            Gets the DataRow in the FirstTable at the
            specified index
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.CreateRowFromData">
            <summary>
            Creates one or many rows form a given piece of data.
            </summary>
            <param name="parentSpreadsheet">Used for the data schema to create the ExportSpreadsheetRows</param>
            <param name="data">A piece of data that is used to create one or multiple ExportSpreadsheetRows.</param>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.ExportSpreadsheet">
            <summary>
            </summary>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheet.Define(System.Collections.Generic.IEnumerable{UtilityData.Database.ExportSpreadsheetColumn})">
            <summary>
            Defines an Export Spreadsheet by the columns that it contains.
            
            Automatically sets the indexes of the columns in the order that the
            columns are given
            </summary>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheet.PopulateAndExport(System.String,System.Collections.Generic.List{UtilityData.Database.ExportSpreadsheetDataPiece})">
            <summary>
            Populates the Data of this Spreadsheet
            and exports it to an Excel file at the given path.
            </summary>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheet.ConvertSpreadsheetRowToDataRow(UtilityData.Database.ExportSpreadsheetRow)">
            <summary>
            Converts the given ExportSpreadsheetRow to a DataRow.
            
            Runs the necessary FilterValue methods on the necessary values.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.ExportSpreadsheet.Data">
            <summary>
            The DataTable that will be populated with spreadsheet data.
            It will be used to create the Excel spreadsheet.
            
            It will take the column-shape of the columns in this Spreadsheet
            </summary>
        </member>
        <member name="T:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet">
            <summary>
            Used for creating dynamic reports
            </summary>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.#ctor(System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="maxLevelOfForeignKeyReplacement">
            When in doubt, set this to 0.
            
            Indicates how many levels deep we will go to replace the foreign keys of the spreadsheet.
            For instance, let's say the given table group elements are made up of 4 columns and 1 is a foreign key.
            
            We go down a level of recursion to replace that foreign key with the foreign columns. So now we're only level 1.
            We find out that the replacement is actually 2 more foreign keys. So to replace those, we'd go down to level 2,
            etc.
            
            By setting this max level limit, we ensure that the function will not go on replacing
            foreign keys forever. It will summarize the foreign keys at the maxLevelsOfReplacement level.
            
            If a given exportSpreadsheetColumns has exportSpreadsheetColumns.Summary==true then
            the foreign key column will automatically be summarized rather than going down more levels.
            
            Set this to -1 if there should be no maximum.
            </param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.IndexOfColumn(UtilityData.Database.Column)">
            <summary>
            Retrieves the index of a column in this spreadsheet.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.IndexesWhere(System.Predicate{UtilityData.Database.Column})">
            <summary>
            Gets the indexes of the columns that satisfy a condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.ColumnsWhere(System.Predicate{UtilityData.Database.Column})">
            <summary>
            Gets the columns that satisfy a condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.ConvertTableDefinitionToSpreadsheetColumns(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Converts the columns within a table definition to export spreadsheet columns.
            </summary>
            <param name="tableDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.AutoAssignIndexesToColumns(UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn[]@)">
            <summary>
            Auto increments indexes starting at 0 and assigns them to the given columns
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet._getTableGroupElementsOfSummaryColumns(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Boolean,System.Int32@)">
            <summary>
            Given an array of summary columns, gets the table group elements for each summary column.
            If the summary column is a foreign key column, the summary columns of the foreign column's table definition
            will also be given in the returned list of table group elements.
            </summary>
            <param name="summaryColumns"></param>
            <param name="hardStop">If true, indicates that any summary column that has a foreignKeyColumn will not be used.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet._replaceAllForeignKeyColumnsWithForeignColumns(System.Int32,System.Collections.Generic.List{UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn},UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn,System.Collections.Generic.List{UtilityData.Database.ITableGroupElement},System.Int32@,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="tableGroupNumber"></param>
            <param name="exportSpreadsheetColumns">The Export Spreadsheet Columns that correspond with the given TableGroupElements.</param>
            <param name="tableGroupElements"></param>
            <param name="nextTableGroupNumberToUse"></param>
            <param name="tableGroupJoinValue">The joinValue of the table group in which we're replacing the foreign key columns</param>
            <param name="parentExportSpreadsheetColumn">The ExportSpreadsheetColumn that this tableGroup is under (null if this is at the root)</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.ExportToExcel(System.String)">
            <summary>
            Populates the current data from the database to fill all of this
            spreadsheet's columns and then exports the spreadsheet to
            an excel file.
            </summary>
            <param name="pathWithFileName"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet._getColumnDisplayNameOfChild(System.Boolean,UtilityData.Database.TableGroup,UtilityData.SQL.ISQLVariables.SQLColumn)">
            <summary>
            Returns null if the column was not found in the tableGroup
            </summary>
            <param name="container"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.DetermineCorrectParentSpreadsheetIndex(UtilityData.SQL.ISQLVariables.SQLColumn,System.Collections.Generic.List{UtilityData.Database.ITableGroupElement})">
            <summary>
            
            </summary>
            <param name="offset">The number of "non-root elements" that have been processed thus far</param>
            <param name="sqlColumn">The sqlColumn for which we will find the proper spreadsheet index</param>
            <param name="rootTableGroupElements"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.IsEndUserReport">
            <summary>
            If true, indicates that this report is meant for an end user
            (a consumer) and therefore certain columns will not be retrieved
            in the report (i.e. those with a Column.AvailableInEndUserReports==false)
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheet.MaxLevelOfForeignKeyReplacement">
            <summary>
            When in doubt, set this to 0.
            
            Indicates how many levels deep we will go to replace the foreign keys of the spreadsheet.
            For instance, let's say the given table group elements are made up of 4 columns and 1 is a foreign key.
            
            We go down a level of recursion to replace that foreign key with the foreign columns. So now we're only level 1.
            We find out that the replacement is actually 2 more foreign keys. So to replace those, we'd go down to level 2,
            etc.
            
            By setting this max level limit, we ensure that the function will not go on replacing
            foreign keys forever. It will summarize the foreign keys at the maxLevelsOfReplacement level.
            
            If a given exportSpreadsheetColumns has exportSpreadsheetColumns.Summary==true then
            the foreign key column will automatically be summarized rather than going down more levels.
            
            Set this to -1 if there should be no maximum.
            </summary>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetRow.#ctor(UtilityData.Database.ExportSpreadsheet)">
            <summary>
            Fills the values of the row with nulls
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:UtilityData.Database.ExportSpreadsheetRow.Parent">
            <summary>
            The parent ExportSpreadsheet that defines the
            data scheme for this Spreadsheet Row
            </summary>
        </member>
        <member name="P:UtilityData.Database.ExportSpreadsheetRow.Values">
            <summary>
            The values in this Row.
            
            Key is the column to which the value
            belongs. Value is the column value.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLColumnOrFunction},System.Boolean,System.Int32)">
            <summary>
            Uses TOP, not DISTINCT
            does NOT select All
            </summary>
            <param name="columnsToSelect"></param>
            <param name="distinct"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Boolean,System.Int32)">
            <summary>
            Selects ALL
            Uses TOP, not DISTINCT
            </summary>
            <param name="columnsToSelect"></param>
            <param name="isPercentage"></param>
            <param name="topAmount"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.SQLColumn},System.Boolean)">
            <summary>
            Uses DISTINCT, not TOP
            does NOT select All
            </summary>
            <param name="columnsToSelect"></param>
            <param name="distinct"></param>
            <param name="isPercentage"></param>
            <param name="topAmount"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLColumnOrFunction},System.Boolean)">
            <summary>
            Uses DISTINCT, not TOP
            does NOT select All
            </summary>
            <param name="columnsToSelect"></param>
            <param name="distinct"></param>
            <param name="isPercentage"></param>
            <param name="topAmount"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Boolean)">
            <summary>
            Selects ALL
            Uses DISTINCT, not TOP
            </summary>
            <param name="columnsToSelect"></param>
            <param name="distinct"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLColumnOrFunction},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Uses TOP and DISTINCT
            does NOT select all
            </summary>
            <param name="columnsToSelect"></param>
            <param name="isPercentage"></param>
            <param name="topAmount"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Selects ALL
            Uses TOP and DISTINCT
            </summary>
            <param name="columnsToSelect"></param>
            <param name="distinct"></param>
            <param name="isPercentage"></param>
            <param name="topAmount"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.SQLFunction})">
            <summary>
            Does not use TOP or DISTINCT
            Does not select all
            
            Standard SELECT
            </summary>
            <param name="functionsToSelect"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.SQLColumn})">
            <summary>
            Does not use TOP or DISTINCT
            Does not select all
            
            Standard SELECT
            </summary>
            <param name="columnsToSelect"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.ISQLColumnOrFunction})">
            <summary>
            Does not use TOP or DISTINCT
            Does not select all
            
            Standard SELECT
            </summary>
            <param name="columnsToSelect"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SelectValue.#ctor">
            <summary>
            Selects ALL
            
            Does not use TOP or DISTINCT
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.ColumnsToSelect">
            <summary>
            The Columns (or Functions) to Select
            
            You could add a SQLFunction. For example: MAX(Column_Name).
            MAX being the SQLFunction (the SQLFunction itself would contain the column Column_Name.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.SelectTopRecords">
            <summary>
            Indicates whether the TOP number|percentage of records should
            be selected from the query.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.IsPercentage">
            <summary>
            Assuming that SelectTopRecords is true,
            indicates whether we are selecting the TOP number of records (false)
            or the TOP percentage of records (true)
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.TopAmount">
            <summary>
            Assuming that SelectTopRecords is true,
            This is the number (assuming IsPercentage is false)
            or percentage (assuming IsPercentage is true) or records
            that will be selected from the query.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.Distinct">
             <summary>
             If true, indicates that the DISTINCT keyword will be used in the Query.
             
             In a table, some of the columns may contain duplicate values. This is not a problem, however, sometimes you will want to list only the different (distinct) values in a table.
            
             The DISTINCT keyword can be used to return only distinct (different) values.
             </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.SelectValue.SelectAll">
            <summary>
            If true, indicates that "*" should be used to indicate
            that all of the columns in the query will be selected.
            
            If false, the ColumnsToSelect will be used.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.#ctor(UtilityData.Database.Column,Utility.Spreadsheets.Excel.ColumnFormatOptions,System.Boolean,System.Boolean)">
            <summary>
            Only use this if the index will be set at a later time
            
            Uses the display text of the column
            </summary>
            <param name="column"></param>
            <param name="summary"></param>
            <param name="formatType"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.#ctor(UtilityData.Database.Column,System.String,System.Boolean,System.Boolean)">
            <summary>
            Only use this if the index will be set at a later time
            
            Uses ColumnFormatOptions.Text
            </summary>
            <param name="column"></param>
            <param name="displayText"></param>
            <param name="columnFormatOptions"></param>
            <param name="summary"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.#ctor(UtilityData.Database.Column,System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions,System.Boolean,System.Boolean)">
            <summary>
            Only use this if the index will be set at a later time
            </summary>
            <param name="column"></param>
            <param name="displayText"></param>
            <param name="summary"></param>
            <param name="formatType"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.#ctor(UtilityData.Database.Column,System.Int32,Utility.Spreadsheets.Excel.ColumnFormatOptions,System.Boolean,System.Boolean)">
            <summary>
            Uses the display text of the column
            </summary>
            <param name="column"></param>
            <param name="index"></param>
            <param name="displayText"></param>
            <param name="summary"></param>
            <param name="formatType"></param>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.Summary">
            <summary>
            If true, indicates that if there is a foreign key column, then we should not 
            gather all of the columns from the foreign table but rather just the "Summary" 
            columns (as denoted in the parent TableDefinition's Summary Column Group) to use in place of the foreign key column.
            
            If false, all the columns from the foreign table will be gathered.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.HardStopWhenReplacing">
            <summary>
            Used when replacing all foreign keys in the spreadsheet with
            the corresponding foreign columns.
            
            If true, we will go down to the desired level of replacement (as designated
            by the ExportSpreadsheet's MaxLevelOfForeignKeyReplacement) and if the foreign
            column replacements contain any foreign column keys, then they will not be used.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.DynamicExportSpreadsheetColumn.Column">
            <summary>
            The Column off of which this DynamicExportSpreadsheetColumn is based.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Database.GetJoinTablesAndAliases(UtilityData.Database.Column[],System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.WhereValue},System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Given columns to select and WhereValues that will be used as a Clause,
            returns the tables that need to be joined in order to use these columns.
            
            Also returns the table aliases along with the table aliases for just the columnsToSelect
            </summary>
            <param name="columnsToSelect"></param>
            <param name="whereValues"></param>
        </member>
        <member name="M:UtilityData.Database.Database.#ctor(System.String,System.Collections.Generic.IEnumerable{UtilityData.Database.Tables.TableDefinition})">
            <summary>
            
            </summary>
            <param name="databaseName">The actual name of the SQL Database</param>
            <param name="tables"></param>
        </member>
        <member name="M:UtilityData.Database.Database.#ctor(System.String,UtilityData.Database.Tables.TableDefinition[])">
            <summary>
            
            </summary>
            <param name="databaseName">The actual name of the SQL Database</param>
            <param name="tableDefinitions"></param>
        </member>
        <member name="M:UtilityData.Database.Database.UpdateTablesWithValueConstraintColumns">
            <summary>
            Goes through all of the tables and updates any of the Columns that have a Value Constraint on their Domain.
            Updates the acceptable values.
            
            Should only be used once a connection to the database has been made.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Database._sortTablesAndMergeGapsForJoining(System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition})">
            <summary>
            Sorts the specified tables and bridges the gaps between any tables
            that are not immediately related.
            </summary>
            <param name="tablesToSort"></param>
            <param name="thusFar"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.SortTablesForJoining(System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition}@)">
            <summary>
            Given a list of tables, sorts them in such a way that they can
            be joined.
            
            Returns true if the tables were sorted.
            Returns false if the tables were not sorted.
            </summary>
            <param name="tablesToSort"></param>
        </member>
        <member name="M:UtilityData.Database.Database.GetTablesToMergeGap(UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Given a start TableDefinition and an end (goal) TableDefinition, finds all of the 
            TableDefinitions that are needed to bridge the gap between the start and the goal.
            
            Returns an empty list of the start and goal tableDefinition are already directly
            related
            </summary>
            <param name="start"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.GetDistinctTablesOfColumns(UtilityData.Database.Column[])">
            <summary>
            Given an array of columns, returns a list of the tableDefinitions (without duplicates)
            to which the columns belong
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.SortColumnsIntoDistinctTables(UtilityData.Database.Column[])">
            <summary>
            Given an array of columns, determines which columns belong to which table
            definitions and then puts each table definition in a dictionary along
            with a list of its corresponding columns from the given array.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.GetJoinValues(System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UtilityData.Database.Column})">
            <summary>
            JoinTypes are automatically determined
            </summary>
            <param name="tableDefinitions"></param>
            <param name="tableAliases"></param>
            <param name="preferredForeignKeyColumns"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.GetJoinValues(System.Collections.Generic.List{UtilityData.Database.Tables.TableDefinition},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UtilityData.Database.Column},System.Collections.Generic.List{Wintellect.PowerCollections.Pair{System.Boolean,UtilityData.SQL.JoinType}})">
            <summary>
            For each TableDefinition in the given TableDefinitions, finds the ForeignKeyColumns that link
            the TableDefinition to the next TableDefinition and the ForeignColumns that are
            referenced by the ForeignKeyColumns.
            
            Returns the JoinValues that join each table to the next table.
            
            Assumes that the given tableDefinitions are sorted in such a way that they can be joined.
            </summary>
            <param name="preferredForeignKeyColumns">The preferred foreignKeyColumn to use to join each corresponding table (if it's available).
            
            Uses the preferred foreignKeyColumn for each corresponding tableDefinition if it exists. Otherwise, finds the first foreignKeyColumn
            available.</param>
            <param name="forceJoinType">This enables a specific JoinValue to be used instead of the foreignKeyColumn's Column.JoinTypeToForeignColumn.
            If you don't want to override the JoinValue (i.e., you want to use the Column.JoinTypeToForeignColumn) then set the first item in the pair to false. If you
            want to override it, set the first item to true and the second item to the desired JoinValue.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.MoveElements(System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,System.Func{UtilityData.Database.Database.TableForJoin,System.Boolean})">
            <summary>
            Moves all of the tablesAndAliases that satisfy the given predicate
            from the "from" list of TableForJoin to the "to" list of TableForJoin.
            Elements are removed from the "from" tableGroup.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="affectedElements">The elements that are affected by the </param>
            <param name="insertAtIndex">The index at which to insert the affected elements</param>
        </member>
        <member name="M:UtilityData.Database.Database.GroupTables(System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin})">
            <summary>
            Groups all of the elements at the root level of this TableGroup by their
            tableDefinition. Returns the grouped table group.
            
            Ensures that all of the elements with tables that are REFERENCED appear
            toward the beginning of the group
            </summary>
            <param name="groupedTableGroup"></param>
        </member>
        <member name="M:UtilityData.Database.Database.IdentifyNumberReferenced(System.Collections.Generic.IEnumerable{UtilityData.Database.Tables.TableDefinition},UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Determines how many TableDefinitions in the given list are referenced
            by the given tableDefinition
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.IdentifyTableWithMostReferenced(System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin})">
            <summary>
            Returns null if none of the tables have references to other
            tables
            </summary>
            <returns>Table with most references to other tables along with its table alias</returns>
        </member>
        <member name="M:UtilityData.Database.Database.Join(UtilityData.SQL.ISQLVariables.SelectValue,System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin},UtilityData.SQL.SQLElement)">
            <summary>
            Creates and executes a query for the given tables (no need to sort or group them for joining, this
            method will take care of that).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Database.MakeJoinValuesForTable(System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,UtilityData.Database.Database.TableForJoin)">
            <summary>
            Attempts to join a set of elements with the same table definition in groupedTables
            to a different set of elements (but with all of those different elements having
            a same table definition).
            Does for all sets of elements possible.
            
            After this creation of join values is completed, all of the elements that have tableDefinitions
            that are relate-able can be found in tablesReadyForJoin.
            Those same elements are removed from groupedTables.
            </summary>
            <param name="groupedTableGroup"></param>
            <param name="completedElementsTableGroup"></param>
            <param name="mainTable"></param>
        </member>
        <member name="M:UtilityData.Database.Database.PrepareTableSetForJoin(System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,System.Collections.Generic.List{UtilityData.Database.Database.TableForJoin}@,UtilityData.Database.Database.TableForJoin,UtilityData.Database.Database.TableForJoin)">
            <summary>
            Creates a JoinValue for tableOfTableSet to join it to tableToWhichToJoin.
            Then Moves all elements with the tableOfTableSet TableDefinition from
            the groupedTables to the tablesReadyForJoin
            </summary>
            <param name="groupedTableGroup"></param>
            <param name="completedElementsTableGroup"></param>
            <param name="tableOfTableSet"></param>
            <param name="tableToWhichToJoin"></param>
        </member>
        <member name="M:UtilityData.Database.Database.IsJoinedRowInDatabase(UtilityData.Database.Tables.TableDefinition[],UtilityData.Database.Column[],System.Object[],System.Object@)">
            <summary>
            If multiple rows are found, the primary key of the first row will be found
            </summary>
            <param name="tableFromWhichToSelectPrimaryKey"></param>
            <param name="tables"></param>
            <param name="columns"></param>
            <param name="values"></param>
            <param name="primaryKeys"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.IsJoinedRowInDatabase(UtilityData.Database.Tables.TableDefinition[],UtilityData.Database.Column[],System.Object[],System.Collections.Generic.List{System.Object}@)">
            <summary>
            Uses Inner Joins for join types
            </summary>
            <param name="tableFromWhichToSelectPrimaryKey"></param>
            <param name="tables"></param>
            <param name="columns"></param>
            <param name="values"></param>
            <param name="primaryKeys"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.IsJoinedRowInDatabase(System.Collections.Generic.List{UtilityData.SQL.JoinType},UtilityData.Database.Tables.TableDefinition[],UtilityData.Database.Column[],System.Object[],UtilityData.SQL.ISQLVariables.WhereLogicOperator[],UtilityData.SQL.ISQLVariables.WhereValueBracket[],UtilityData.Database.Column[],System.Collections.Generic.List{System.Object}@)">
            <summary>
            Indicates whether a row (made up of different columns from different tables) is in the database
            
            The primary key column that is chosen will belong to the first table in tables
            
            Out's the primary key if a row is found 
            If multiple are found, all primary keys are out'd.
            Otherwise out's null.
            
            Removes any duplicate primary keys if multiple are returned.
            </summary>
            <param name="tables">All of the tables besides THIS TableDefinition that are referenced in the columns</param>
            <param name="columns">The columns can belong to any table as long as the table
            is contained in allTablesReferenced or THIS table.</param>
            <param name="values">The values that will sequentially correspond with the
            given columns</param>
            <param name="primaryKeys">the primary keys of the rows that was found (null if not found)
            The primary key to select is based on the tableFromWhichToSelectPrimaryKey</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Database.IsAnyRowInDatabase(UtilityData.Database.Column[],System.Object[],System.Collections.Generic.List{System.Object}@)">
            <summary>
            Determines if a row with the given columns (and corresponding values) exists
            in the database (these columns can span across multiple tables).
            </summary>
            <param name="columnGroup"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Database.Name">
            <summary>
            The actual name of the SQL Database
            </summary>
        </member>
        <member name="P:UtilityData.Database.Database.Tables">
            <summary>
            The Tables in the Database
            </summary>
        </member>
        <member name="P:UtilityData.Database.Database.ColumnsWithTables">
            <summary>
            Contains each column in the database along with its corresponding TableDefinition
            </summary>
        </member>
        <member name="P:UtilityData.Database.Database.SQLConnection">
            <summary>
            The SQLConnection that has a connection to this Database.
            
            This will be set when the Server is created and the databases are added.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Database.TableForJoin.#ctor(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Sets PreferredForiegnKeyColumn to null
            </summary>
            <param name="tableDefinition"></param>
            <param name="tableAlias"></param>
        </member>
        <member name="T:UtilityData.Database.Rows.IStrongEnum">
            <summary>
            An interface from which other strongly-typed Enums should derive.
            
            TableDefinitions that are essentially enum tables should
            have an instance of a class which derives from this BaseEnum
            so that their values can be used in code.
            </summary>
        </member>
        <member name="F:UtilityData.SQL.JoinType.InnerJoin">
            <summary>
            Results will only be returned for an InnerJoin
            if any of the results from the constraint (ON Table1.Column=Table2.Column)
            are true. If none are true, the whole Join will return null.
            </summary>
        </member>
        <member name="F:UtilityData.SQL.JoinType.LeftOuterJoin">
            <summary>
            Results will be returned even if the constraint is not true 
            (ON Table1.Column=Table2.Column). If it's not true, the other Joins
            will still commence.
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.OrderByValue">
            <summary>
            A Value that should only be used with the OrderBy Clause
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.OrderByValue.OrderColumn">
            <summary>
            The Column to order
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.OrderByValue.Ascending">
            <summary>
            Indicates whether the column should be ordered ascending
            (true) or descending (false)
            </summary>
        </member>
        <member name="M:UtilityData.Log.SenderIdentifier.RegisterError(UtilityData.Log.Error)">
            <summary>
            Registers the specified error in the Logger and ties
            it to this SenderIdentifier
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:UtilityData.Log.SenderIdentifier.Unique">
            <summary>
            Retrieves a new, unique SenderIdentifier
            </summary>
        </member>
        <member name="P:UtilityData.Log.SenderIdentifier.NumberOfErrors">
            <summary>
            The number of errors currently registered under this
            senderIdentifier
            </summary>
        </member>
        <member name="P:UtilityData.Log.Error.User">
            <summary>
            The User that made the mistake
            </summary>
        </member>
        <member name="P:UtilityData.Log.Error.RowsOfInterest">
            <summary>
            Can be null
            </summary>
        </member>
        <member name="P:UtilityData.Log.Error.TableOfInterest">
            <summary>
            can be null
            </summary>
        </member>
        <member name="T:UtilityData.Database.TableGroupContainer">
            <summary>
            This is basically just a wrapper around a TableGroup that
            acts as a container for other table groups elements
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroupContainer.#ctor(UtilityData.Database.TableGroup)">
            <summary>
            Only use this if you already have a TableGroup that acts as a container of other table groups
            </summary>
            <param name="containingTableGroup"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroupContainer.GetTableGroupElementsInOrder">
            <summary>
            Gets the table group elements of this TableGroupContainer as they appear if traversed
            from front to back, going into each table group that is encountered.
            Their index is the key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.TableGroupContainer.ContainingTableGroup">
            <summary>
            The TableGroup that will contain the table groups. We will
            use this when we need to sort the table groups.
            </summary>
        </member>
        <member name="F:UtilityData.Database.IsInDatabaseResult.SingleInstance">
            <summary>
            There was 1 single entity in the database matching
            the specified criteria
            </summary>
        </member>
        <member name="F:UtilityData.Database.IsInDatabaseResult.None">
            <summary>
            There were no entities in the database matching
            the specified criteria
            </summary>
        </member>
        <member name="F:UtilityData.Database.IsInDatabaseResult.Multiple">
            <summary>
            There are multiple entities in the database matching
            the specified criteria
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a Connection with IntegratedSecurity=true
            (Doesn't use User or Password. The current Windows Account Credentials are used for authentication).
            
            Does not specify a port.
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="connectionTimeOut"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a Connection with IntegratedSecurity=true
            (Doesn't use User or Password. The current Windows Account Credentials are used for authentication).
            
            Will listen on specified port.
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="port"></param>
            <param name="connectionTimeOut"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="userID">The user trying to login to the server such as "admin".</param>
            <param name="password">The password to the server that corresponds with the UserID</param>
            <param name="server">The Server</param>
            <param name="database">The database to which to connect</param>
            <param name="connectionTimeOut">The number of seconds after which the connection will time out</param>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.ResetConnectionString">
            <summary>
            Resets the connection string based on the values of 
            UserID, Password, Server, Database, ConnectionTimeOut, etc.
            
            Creates Trusted Connection String
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.GetAllDatabases">
            <summary>
            Gets all of the databases that are contained by the
            Server to which this SQLConnection is connected
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.GetAllDatabaseNames">
            <summary>
            Gets the names of all of the databases that are contained by the
            Server to which this SQLConnection is connected
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLConnection.GetAllTables">
            <summary>
            Retrieves all Tables from the database to which this
            SQLConnection is connected
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.SQLConnection.UserID">
            <summary>
            The user trying to login to the server such as "admin".
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLConnection.Password">
            <summary>
            The password to the server that corresponds with the UserID
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLConnection.IntegratedSecurity">
            <summary>
            If true, UserID, Password will not be used because the current Windows Account Credentials are used for authentication
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLConnection.Port">
            <summary>
            The port on which to make this connection to the server.
            If -1, no port will be specified in the Connection String.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLConnection.ConnectionTimeOut">
            <summary>
            The number of seconds after which the connection will time out
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.SQLValue">
            <summary>
            A SQLValue represents a value that is tied to a column.
            
            A SQLData, on the other hand, is not tied to any column (and is only used as the argument
            of a function).
            
            Generally, this should be used in Where, Insert, and Update elements.
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.SQLColumn.TableAlias">
            <summary>
            The Alias of the Table to which this Column belongs
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.SQLColumn.ColumnDisplayName">
            <summary>
            The name of the Column as it will appear in the results of 
            the SQL Query.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLColumn.#ctor(UtilityData.Database.Column,System.String)">
            <summary>
            The ColumnDisplayName as it will appear in the SQL Query will be column.Name.
            </summary>
            <param name="column">The Column that will be used in the SQL Command</param>
            <param name="tableAlias">The Alias of the Table to which this Column belongs</param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLColumn.#ctor(UtilityData.Database.Column,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="column">The Column that will be used in the SQL Command</param>
            <param name="tableAlias">The Alias of the Table to which this Column belongs</param>
            <param name="columnDisplayName">The name of the Column as it will appear in the results of 
            the SQL Query.</param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLColumn.GetTableAliasAndColumnName">
            <summary>
            Gets the table's alias followed by the column's true name
            (e.g. t.Column)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLColumn.GetTableAliasAndColumnNameAsDisplayName">
            <summary>
            Gets the table's alias followed by the column's name along with the "as 'displayname'"
            which will ensure that the column appears in the query results with the display name
            of this.ColumnDisplayName.
            
            This should be use when "Selecting" this SQLColumn
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.TableGroupElement">
            <summary>
            A TableGroupElement is a terminal ITableGroupElement that does not
            contain any further elements or table groups.
            </summary>
        </member>
        <member name="M:UtilityData.Database.TableGroupElement.#ctor(UtilityData.Database.Column)">
            <summary>
            Only use this if the column is a ForeignKey Column
            </summary>
            <param name="column"></param>
            <param name="foreignTableGroup"></param>
        </member>
        <member name="M:UtilityData.Database.TableGroupElement._getRootParent(UtilityData.Database.ITableGroupElement)">
            <summary>
            Gets the root parent of the given element
            
            Returns this element if there is no parent.
            
            The ContainingTableGroup in the TableGroupContainer is
            not considered a parent.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroupElement.GetRootParent">
            <summary>
            Gets the root parent of this element
            
            Returns this element if there is no parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.TableGroupElement.GetRootColumnAndTableAlias">
            <summary>
            Goes up until we get to the root level and then returns
            the Column and TableAlias to which this Element belongs (If we're already at
            the root level then this returns this column's column and table alias. If this element
            has a parent tableGroup, then the foreign key column of the JoinValue is returned).
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.TableGroupElement.JoinValue">
            <summary>
            The JoinValue to join this TableGroup's TableDefinition to a foreign key
            in a different TableDefinition 
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroupElement.TableAlias">
            <summary>
            The TableAlias that will be used with the Column.
            
            This should be automatically set by the parent TableGroup
            on construction.
            </summary>
        </member>
        <member name="P:UtilityData.Database.TableGroupElement.Parent">
            <summary>
            The TableGroup that contains this TableGroupElement.
            </summary>
        </member>
        <member name="M:UtilityData.Database.ImportSpreadsheet.Define(System.Tuple{UtilityData.Database.Column,System.String,System.String}[])">
            <summary>
            Converts the passed columns into SpreadsheetColumns.
            All columns will be in "Text" format on the spreadsheet.
            
            
            ParseResultsTableName is:
            The name of the Table to which this Column will belong after it is 
            parsed from the spreadsheet (consisting of a DataTable). (THIS IS NOT
            NECESSARILY THE TABLE NAME)
            
            For instance, let's say our Database has a Contact TableDefinition.
            And the Contact spreadsheet has columns "Name" "Address" and "Title"
            And our spreadsheet has 2 contacts on it.
            We want to be able to parse those 2 contacts into two separate tables.
            To delineate those two tables, 
            
            the SpreadsheetColumn for the Name for the first
            Contact may have a ParseResultTableName of "Contact1" and
            the SpreadsheetColumn for the Name for the second
            Contact may have a ParseResultTableName of "Contact2"
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.ImportSpreadsheet.Define(System.Collections.Generic.IEnumerable{UtilityData.Database.Spreadsheets.ImportSpreadsheetColumn})">
            <summary>
            Defines a Spreadsheet by the columns that it contains
            </summary>
        </member>
        <member name="M:UtilityData.Database.ImportSpreadsheet.Parse(System.Data.DataTable)">
            <summary>
            Given a spreadsheet of data in the form of a DataTable,
            parses the data into a list of RowCollections.
            Returns a dictionary of the ParseResultTableName and each RowCollection tied to it.
            
            Each RowCollectionn is for a different Table as defined by the Spreadsheet Columns' 
            ParseResultTableName.
            
            See SpreadsheetColumn.ParseResultTableName for more info
            </summary>
            <param name="spreadsheetData"></param>
            <returns></returns>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs">
            <summary>
            Used when a Row's value or a value in a ForeignRow of a Row (or one of its children) or
            a value in a ForeignKeyRow of a Row (or one of its children)
            has changed.
            
            Raised when "AnyValueOfForeignRowChanged" is raised or "AnyValueOfForeignKeyRowValueChanged"
            or "AnyValueOfRowChanged" is raised.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs.Column">
            <summary>
            The column that held the value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs.PreviousValue">
            <summary>
            The value before it was changed
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="F:UtilityData.Database.Rows.RowValueType.Standard">
            <summary>
            A standard value that belongs to a Row
            </summary>
        </member>
        <member name="F:UtilityData.Database.Rows.RowValueType.ForeignStrongRow">
            <summary>
            A Foreign StrongRow that belongs to a Row
            </summary>
        </member>
        <member name="F:UtilityData.Database.Rows.RowValueType.ForeignKeyStrongRow">
            <summary>
            A ForeignKey StrongRow that belongs to a Row
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs">
            <summary>
            Used when some row value in a Row changed.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.#ctor(System.Object,System.Object,UtilityData.Database.Column,UtilityData.Database.Rows.IRow,UtilityData.Database.Rows.RowValueType)">
            <summary>
            
            </summary>
            <param name="previousValue"></param>
            <param name="newValue"></param>
            <param name="column"></param>
            <param name="row">The row whose value changed</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.Column">
            <summary>
            The column that held the value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.PreviousValue">
            <summary>
            The value before it was changed
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs.RowValueType">
            <summary>
            The type of value that changed.
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.RowValueChangedEventArgs`1">
            <summary>
            Used when a specific value of a Row (Row or StrongRow) has changed
            </summary>
            <typeparam name="TRowValue">The type of the Value that changed</typeparam>
        </member>
        <member name="M:UtilityData.Database.Rows.RowValueChangedEventArgs`1.#ctor(`0,`0,UtilityData.Database.Column,UtilityData.Database.Rows.IRow)">
            <summary>
            
            </summary>
            <param name="previousValue">The value before it was changed</param>
            <param name="newValue">The new value after it was changed.</param>
            <param name="column">The column that held the value that was changed.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.RowValueChangedEventArgs`1.PreviousValue">
            <summary>
            The value before it was changed
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.RowValueChangedEventArgs`1.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.RowValueChangedEventArgs`1.Column">
            <summary>
            The column that held the value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.RowValueChangedEventArgs`1.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs">
            <summary>
            Used when the value of a Primary Key in a Row has changed
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs.#ctor(System.Object,System.Object,UtilityData.Database.Column,UtilityData.Database.Rows.IRow)">
            <summary>
            
            </summary>
            <param name="previousValue">The primary key value before it was changed.</param>
            <param name="newValue">The new primary key value after it was changed.</param>
            <param name="column">The primary key column that held the primary key value that was changed.</param>
            <param name="row">The Row whose primary key value changed</param>
        </member>
        <member name="P:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs.PreviousValue">
            <summary>
            The primary key value before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs.NewValue">
            <summary>
            The new primary key value after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs.Column">
            <summary>
            The primary key column that held the primary key value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs.Row">
            <summary>
            The Row whose primary key value changed
            </summary>
        </member>
        <member name="T:UtilityData.Database.JoinedRow">
            <summary>
            A Joined Row is multiple rows that are
            concatenated (joined) together.
            </summary>
        </member>
        <member name="M:UtilityData.Database.JoinedRow.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.Row})">
            <summary>
            Ensures that no column names are duplicated
            so that every column name is unique and
            can be uniquely identified.
            
            This JoinedRow is essentially a Row and therefore
            cannot have multiple columns with the same name.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="M:UtilityData.Database.JoinedRow.GetValue(UtilityData.Database.Column)">
            <summary>
            Retrieves a piece of data in the JoinedRow that
            is found in the cell of the Column found by the
            Column name given.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.JoinedRow.ExtractRow(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Retrieves the values of the Row of the specified TableDefinition from
            this JoinedRow
            </summary>
            <param name="tableDefinition"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.JoinedRow.Rows">
            <summary>
            The Rows that make up this JoinedRow
            </summary>
        </member>
        <member name="T:UtilityData.Database.Views.View">
            <summary>
            A View allows the user to construct a table
            that is made up of columns from different database tables
            </summary>
        </member>
        <member name="M:UtilityData.Database.Views.View.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Collections.Generic.IList{System.String},UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Views.TableRelationship[])">
            <summary>
            This should only be used if there will NOT be more than 1 instance of any given TableDefinition.
            </summary>
            <param name="columnsInView"></param>
            <param name="columnHeaders"></param>
            <param name="mainTable"></param>
            <param name="otherTables"></param>
        </member>
        <member name="M:UtilityData.Database.Views.View.#ctor(System.Collections.Generic.IEnumerable{UtilityData.SQL.ISQLVariables.SQLColumn},UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Views.TableRelationship[])">
            <summary>
            This should only be used if there will NOT be more than 1 instance of any given TableDefinition.
            </summary>
            <param name="columnsInView"></param>
            <param name="mainTable"></param>
            <param name="otherTables"></param>
        </member>
        <member name="M:UtilityData.Database.Views.View.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Views.ColumnGroup},UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Views.TableRelationship[])">
            <summary>
            This should only be used if there will NOT be more than 1 instance of any given TableDefinition.
            </summary>
            <param name="columnsInView"></param>
            <param name="mainTable"></param>
            <param name="otherTables"></param>
        </member>
        <member name="M:UtilityData.Database.Views.View.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Views.ColumnGroup},UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Views.TableRelationship[])">
            <summary>
            
            </summary>
            <param name="columnsInView">The columns will appear in the order that they appear
            in these columnGroups</param>
            <param name="mainTable"></param>
            <param name="mainTableAlias"></param>
            <param name="otherTables"></param>
        </member>
        <member name="M:UtilityData.Database.Views.View.SetHeaderText(System.String[])">
            <summary>
            Sets the display text of the headers for each column
            </summary>
            <param name="columnHeaderText"></param>
        </member>
        <member name="M:UtilityData.Database.Views.View.QueryView">
            <summary>
            Does NOT adjust the header text of the returned QueryResult.
            To get the adjusted header text, call DataTableView()
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Views.View.QueryView(System.Int32,UtilityData.Database.Column,System.Object)">
            <summary>
            Uses whereColumn.TableDefinition.TableAlias
            </summary>
            <param name="top"></param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Views.View.QueryView(System.Int32,UtilityData.Database.Column,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="top">If greater than 0, this is the number of records
            that should be gathered from the query.</param>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Views.View.QueryView(UtilityData.Database.Column,System.Object)">
            <summary>
            This should ONLY be used if there will NOT be more than 1 instance of any given TableDefinition.
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Views.View.QueryView(System.Int32,UtilityData.SQL.SQLElement)">
            <summary>
            Changes the column headers of the first DataTable in the resulting queryResult
            </summary>
            <param name="clause"></param>
            <param name="top">If greater than 0, this is the number of records
            that should be gathered from the query.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Views.View.DataTableView(UtilityData.SQL.SQLElement)">
            <summary>
            Gets the data of this View as a DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Views.View.Columns">
            <summary>
            The columns in the view
            </summary>
        </member>
        <member name="P:UtilityData.Database.Views.View.MainTable">
            <summary>
            The Main Table from which to select to create
            the View
            </summary>
        </member>
        <member name="P:UtilityData.Database.Views.View.MainTableAlias">
            <summary>
            The TableAlias of the main table
            </summary>
        </member>
        <member name="P:UtilityData.Database.Views.View.OtherTables">
            <summary>
            The Other Tables on which to Join to create the view.
            The TableRelationship specifies their relationships
            to the other tables to tell us how they will be 
            joined.
            </summary>
        </member>
        <member name="T:UtilityData.Database.Views.ColumnGroup">
            <summary>
            A group of columns that all associate under a single Table Alias
            
            All columns must belong to the same tableDefinition
            </summary>
        </member>
        <member name="M:UtilityData.Database.Views.ColumnGroup.#ctor(UtilityData.Database.Column[])">
            <summary>
            This should ONLY be used if there will NOT be more than 1 instance
            of any given TableDefinition in your View.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetColumn.#ctor(System.Int32,System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Uses Type of string for columnValueType.
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
            <param name="columnFormatOptions"></param>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetColumn.#ctor(System.String)">
            <summary>
            Sets column index to -1. This should be set later.
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetColumn.#ctor(System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Sets column index to -1. This should be set later.
            </summary>
            <param name="columnName"></param>
            <param name="columnFormatOptions"></param>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetColumn.#ctor(System.String,UtilityData.Database.ColumnValueType)">
            <summary>
            Sets column index to -1. This should be set later.
            </summary>
            <param name="columnName"></param>
            <param name="columnValueType"></param>
        </member>
        <member name="M:UtilityData.Database.ExportSpreadsheetColumn.#ctor(System.String,UtilityData.Database.ColumnValueType,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Sets column index to -1. This should be set later.
            </summary>
            <param name="columnName"></param>
            <param name="columnValueType"></param>
            <param name="columnFormatOptions"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRowColumn.GetColumnDisplayName(System.Boolean)">
            <summary>
            Gets display name of the StrongRowColumn as it will appear in the column of a DataTable that
            results from a SQL Query involving this StrongRowColumn.
            </summary>
            <param name="tableAliasesAreCompressed">If true, the table aliases used for the SQL Query that involves
            this StrongRowColumn will compress table aliases and thus the DisplayName will reflect as such.</param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRowColumn.#ctor(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column)">
            <summary>
            
            </summary>
            <param name="parent">The Parent StrongRow that contains this StrongRowColumn.</param>
            <param name="column">The Column that used to access the StrongRowColumn's value in the underlying row.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.Parent">
            <summary>
            The Parent StrongRow that contains this StrongRowColumn.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.Column">
            <summary>
            The Column that used to access the StrongRowColumn's value in the underlying row.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.Value">
            <summary>
            The value in this column in the underlying row.
            
            When set, the parent StrongRow's OnAnyRowValueChanged will be raised.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.TableAliasUniqueInChain">
            <summary>
            Gets the Unique TableAlias for the Table used for Joining for this Strong Row Column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.TableAliasUniqueInChainCompressed">
            <summary>
            Gets the Unique TableAlias for the Table used for Joining for this Strong Row Column.
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowColumn.TableDefinition">
            <summary>
            Gets the TableDefinition to which the column belongs.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.TransactionError.#ctor(System.Exception,UtilityData.SQL.SQLElementBase,System.String,UtilityData.SQL.ErrorType)">
            <summary>
            
            </summary>
            <param name="exception">The exception that was thrown to cause this TransactionError</param>
            <param name="queryPiece">The queryPiece that was being executed when this
            Transaction error occurred.</param>
            <param name="message">A detailed message about the transaction error.</param>
        </member>
        <member name="P:UtilityData.SQL.TransactionError.Message">
            <summary>
            A detailed message about the transaction error.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.TransactionError.SQLElement">
            <summary>
            The SQLElement that was being executed when this
            Transaction error occurred.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.TransactionError.Exception">
            <summary>
            The exception that was thrown to cause this TransactionError
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLTransactionLogger">
            <summary>
            Records all Transactions that are executed
            as a SQLElement
            </summary>
        </member>
        <member name="T:UtilityData.Database.Views.TableRelationship">
            <summary>
            Indicates how a Table relates to another table
            </summary>
        </member>
        <member name="M:UtilityData.Database.Views.TableRelationship.#ctor(UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,UtilityData.Database.Column)">
            <summary>
            This should ONLY be used if your View will NOT have more than 1 instance of
            any single TableDefinition.
            
            Uses TableDefinition.TableAlias
            </summary>
            <param name="joinType"></param>
            <param name="table"></param>
            <param name="foreignKeyColumn"></param>
        </member>
        <member name="M:UtilityData.Database.Views.TableRelationship.#ctor(UtilityData.SQL.JoinType,UtilityData.Database.Tables.TableDefinition,System.String,UtilityData.Database.Column,System.String,System.String)">
            <summary>
            This should be used if your View will have two instances of the same TableDefinition
            (and therefore, TableAliases will need to be specified).
            </summary>
            <param name="table"></param>
            <param name="tableAlias"></param>
            <param name="foreignKeyColumn"></param>
            <param name="tableAliasOfForeignTable">The TableAlias of the foreign table that the ForeignKeyColumn
            references (through the use of ForeignKeyColumn.ForeignColumnReference)</param>
        </member>
        <member name="P:UtilityData.Database.Views.TableRelationship.ForeignKeyColumn">
            <summary>
            The foreign key column that relates this Table
            to another table (i.e. the table of the ForeignColumn)
            </summary>
        </member>
        <member name="P:UtilityData.Database.Views.TableRelationship.JoinValue">
            <summary>
            The JoinValue to the table to which this table relates
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs">
            <summary>
            Used when any value of a ForeignKeyStrongRow changes.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs.#ctor(System.Object,System.Object,UtilityData.Database.Column,UtilityData.Database.Rows.StrongRow)">
            <summary>
            
            </summary>
            <param name="foreignKeyStrongRow">The ForeignKey StrongRow whose value changed.</param>
            <param name="previousValue">The value before it was changed.</param>
            <param name="newValue">The new value after it was changed.</param>
            <param name="column">The column that held the value that was changed.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs.ForeignKeyStrongRow">
            <summary>
            The ForeignKey StrongRow whose value changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs.Column">
            <summary>
            The column that held the value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs.PreviousValue">
            <summary>
            The value before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn">
            <summary>
            Contains information about a ForeignKey from a ForeignKeyStrongRow (i.e.
            a different StrongRow than the subject StrongRow) that can be used to join
            the ForeignKeyStrongRow to this subject StrongRow.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.#ctor(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column)">
            <summary>
            Creates a ForeignKeyToThisStrongRowColumn that can be used to join
            a ForeignKeyStrongRow to a the subject StrongRow.
            </summary>
            <param name="foreignKeyRow">The StrongRow to which the parent StrongRow is joined through the use of the
            ForeignKeyColumn.
            
            This is the ForeignKeyStrongRow which has a reference to the subject StrongRow.</param>
            <param name="foreignKeyColumn">The Foreign Key Column that belongs to the ForeignKeyStrongRow and that 
            references the ForeignColumn which belongs to the parent StrongRow.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignKeyColumn">
            <summary>
            The Foreign Key Column that belongs to the ForeignKeyStrongRow and that 
            references the ForeignColumn which belongs to the parent StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignColumn">
            <summary>
            The Foreign Column that is referenced by the Foreign Key in order
            to join the StrongRow to the ForeignKeyStrongRow.
            
            This ForeignColumn belongs to the parent StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignKeyRow">
            <summary>
            The StrongRow to which the parent StrongRow is joined through the use of the
            ForeignKeyColumn.
            
            This is the ForeignKeyStrongRow which has a reference to the subject StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignKeyTable">
            <summary>
            The TableToWhichToJoin (i.e. the table to which the StrongRow will join).
            This is the table of the ForeignKeyStrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignKeyColumnTableAlias">
            <summary>
            The Unique TableAlias of the ForeignTable used for joining (the table alias of the ForeignKeyStrongRow that 
            contains the Foreign Key Column).
            
            The table alias of the table to which to join.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignKeyColumnTableAliasCompressed">
            <summary>
            The Unique TableAlias of the ForeignTable used for joining (the table alias of the ForeignKeyStrongRow that 
            contains the Foreign Key Column).
            
            The table alias of the table to which to join.
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignColumnTableAlias">
            <summary>
            The Unique TableAlias of the Parent Table for joining (the table alias of the parent table that contains
            the Foreign Column that is referenced by the Foreign Key Column).
            
            The table alias of the table to join.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.ForeignColumnTableAliasCompressed">
            <summary>
            The Unique TableAlias of the Parent Table for joining (the table alias of the parent table that contains
            the Foreign Column that is referenced by the Foreign Key Column).
            
            The table alias of the table to join.
            
            The table alias of the table to join.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.ForeignKeyToThisStrongRowColumn.Parent">
            <summary>
            The Parent StrongRow of the ForeignKeyStrongRow
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLTransactionErrorException">
            <summary>
            Indicates that an SQL Transaction Error occurred and 
            that an SQL Transaction did not execute properly or completely.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLTransactionErrorException.#ctor(UtilityData.SQL.TransactionError)">
            <summary>
            
            </summary>
            <param name="transactionError">The TransactionError that occurred</param>
        </member>
        <member name="P:UtilityData.SQL.SQLTransactionErrorException.TransactionError">
            <summary>
            The TransactionError that occurred
            </summary>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.ImportSpreadsheetColumn.#ctor(System.String,UtilityData.Database.Column,System.Int32,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="parseResultTableName"></param>
            <param name="index"></param>
            <param name="formatType"></param>
        </member>
        <member name="M:UtilityData.Database.Spreadsheets.ImportSpreadsheetColumn.#ctor(System.String,UtilityData.Database.Column,System.Int32,System.String,Utility.Spreadsheets.Excel.ColumnFormatOptions)">
            <summary>
            Specified display text overrides the display text in the passed Column
            </summary>
            <param name="column"></param>
            <param name="index"></param>
            <param name="displayText"></param>
            <param name="formatType"></param>
            <param name="parseResultTableName"></param>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.ImportSpreadsheetColumn.Column">
            <summary>
            The Column off of which this ImportSpreadsheetColumn is based.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Spreadsheets.ImportSpreadsheetColumn.ParseResultTableName">
            <summary>
            The name of the Table to which this Column will belong after it is 
            parsed from the spreadsheet (consisting of a DataTable). (THIS IS NOT
            NECESSARILY THE TABLE NAME)
            
            For instance, let's say our Database has a Contact TableDefinition.
            And the Contact spreadsheet has columns "Name" "Address" and "Title"
            And our spreadsheet has 2 contacts on it.
            We want to be able to parse those 2 contacts into two separate tables.
            To delineate those two tables, 
            
            the SpreadsheetColumn for the Name for the first
            Contact may have a ParseResultTableName of "Contact1" and
            the SpreadsheetColumn for the Name for the second
            Contact may have a ParseResultTableName of "Contact2"
            
            
            This is also used because a Table's columns could be split among
            different columns in the spreadsheet (and thus can't be parsed from one index
            to another--the RowCollection in which it will be stored must be specified
            with the use of this variable).
            </summary>
        </member>
        <member name="F:UtilityData.SQL.SQLFunctionType.PWDEncrypt">
            <summary>
            Encrypts the argument. There is NO decryption function. To test
            if a password is the same, encrypt the second password and compare
            it to the encrypted first password.
            
            http://msdn.microsoft.com/en-us/library/dd822791.aspx
            </summary>
        </member>
        <member name="F:UtilityData.SQL.SQLFunctionType.HashBytes">
            <summary>
            See http://msdn.microsoft.com/en-us/library/ms174415.aspx
            2 arguments. 1st argument is algorithm type:
            MD2, MD4, MD5, SHA, SHA1
            
            2nd argument is the varchar that will be hashed
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLFunction">
            <summary>
            SQL Functions take Columns and Values 
            as Arguments (usually just columns)
            </summary>
        </member>
        <member name="F:UtilityData.SQL.SQLFunction.Arguments">
            <summary>
            The arguments on which the function will be performed.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLFunction.#ctor(UtilityData.SQL.SQLFunctionType,UtilityData.SQL.ISQLVariables.ISQLVariable[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLFunction.#ctor(UtilityData.SQL.SQLFunctionType,UtilityData.SQL.ISQLVariables.SQLColumn[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="columnsOnWhichToPerformFunction"></param>
        </member>
        <member name="M:UtilityData.SQL.SQLFunction.GetFunctionString">
            <summary>
            Gets a string of the function name.
            Includes an open bracket.
            
            Also verifies that the correct number
            of Arguments has been given to this
            SQL Function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.InsertUpdateValue">
            <summary>
            A variable used in Insert statements and Update statements.
            </summary>
        </member>
        <member name="P:UtilityData.Exceptions.DatabaseExceptions.DataIntegrityException.SenderIdentifier">
            <summary>
            The identifying string of the sender of this error
            </summary>
        </member>
        <member name="T:UtilityData.Exceptions.DatabaseExceptions.ValueNotYetSupported">
            <summary>
            Used for the final else statement when checking
            all the cases of an Enum
            </summary>
        </member>
        <member name="T:UtilityData.Database.RowCollection">
            <summary>
            A collection of rows in a single table.
            </summary>
        </member>
        <member name="M:UtilityData.Database.RowCollection.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Rows.Row})">
            <summary>
            
            </summary>
            <param name="rows">A collection of rows in a single table.</param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.GetValuesInColumn(UtilityData.Database.Column)">
            <summary>
            For each row, retrieves the value in the specified column. 
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.PascalCaseStrings">
            <summary>
            Uses the columns in the Table Definition's ColumnsToPascalCase List
            </summary>
        </member>
        <member name="M:UtilityData.Database.RowCollection.UpdateColumnValue(UtilityData.Database.Column,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates the specified column in each row with the corresponding
            value in the provided values.
            
            A value must be provided for every row in this RowCollection.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.UpdateColumnValue(UtilityData.Database.Column,System.Object)">
            <summary>
            For all of the rows in this collection, sets the specified
            column to the specified value
            </summary>
            <param name="column"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.UpdateColumnValue(System.String,System.Object)">
            <summary>
            For all of the rows in this collection, sets the specified
            column to the specified value
            </summary>
            <param name="columnName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.UpdateColumnValueIfNotEmptyRow(UtilityData.Database.Column,System.Object)">
            <summary>
            Only sets the value of the specified column if the row is not equal
            to an EmptyRow
            </summary>
            <param name="columnName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.AcceptAllTransactionsAsNecessary">
            <summary>
            Goes through each row of this row collection.
            Checks to see if the row still needs to be inserted (by checking
            if it already exists in the database--it's possible that a past
            row in the same collection had the same info and thus this one 
            doesn't need to be inserted).
            If it still needs to be inserted, inserts the row.
            </summary>
            <param name="rowCollection"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.SelectPrimaryKeys">
            <summary>
            Selects the primary key of each row in this RowCollection
            and returns all of the primary keys in a list
            
            Assumes that there is only 1 and that they all exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.NormalizeColumn(UtilityData.Database.Column)">
            <summary>
            For each row, uses the values of the row for the normalization
            of the row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.NormalizeColumn(UtilityData.Database.Column,System.Collections.Generic.List{UtilityData.Database.Rows.Row})">
            <summary>
            Only used if there will only be 1 row of values for each row in this
            row collection
            </summary>
            <param name="rowsWithValuesForEachRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.NormalizeColumn(UtilityData.Database.Column,UtilityData.Database.JoinedRow[])">
            <summary>
            Normalizes the specified column in all of the rows in this collection
            </summary>
            <param name="rowsWithValuesForEachRow"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.NormalizeEnumColumns">
            <summary>
            Normalizes all of the ForeignKey columns that reference Enum columns (i.e. IsReferenceColumnAnEnumColumn==true)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.RowCollection.QueueRowsForDatabaseInsertion(UtilityData.Log.SenderIdentifier,System.Collections.Generic.IList{System.String})">
            <summary>
            If any exceptions are encountered, they are consumed and not thrown
            and all transactions on all rows are rejected.
            
            If errors occurred, they can be found in the Logger through the use
            of the given SenderIdentifier
            </summary>
            <param name="referenceNumbersForErrors"></param>
        </member>
        <member name="M:UtilityData.Database.RowCollection.TryQueueRowsForDatabaseInsertion(UtilityData.Log.SenderIdentifier,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Queues all of the rows in this RowCollection for insertion into the database if necessary (See
            row.QueueForDatabaseInsertion()).
            
            Returns the false if errors occurred while attempting to queue the rows.
            </summary>
            <param name="referenceNumbersForErrors"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.RowCollection.TableDefinition">
            <summary>
            The TableDefinition to which each of these rows belongs
            </summary>
        </member>
        <member name="M:UtilityData.DataUtility.ConvertOneNameColumnToTwo(System.Data.DataTable,System.Int32)">
            <summary>
            Converts a single "Full Name" column in a DataTable
            to two columns "First Name" and "Last Name".
            The "Full Name" column will be replaced with the "First Name" column
            and the "Last Name" column will be inserted after the "First Name"
            column.
            </summary>
            <param name="dataTable"></param>
            <param name="columnIndex">The index of the "Full Name" column in the passed dataTable.</param>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable(System.String,System.String,System.Object[])">
            <summary>
            Creates a DataTable with 1 column, holding the specified values
            </summary>
            <param name="columnName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable(System.String,System.String[])">
            <summary>
            Returns a Data Table with the given column names but no rows.
            </summary>
            <param name="dataTableName"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable``1(UtilityData.Database.Rows.StrongRowCollection{``0},System.Boolean)">
            <summary>
            Returns a DataTable with the column names in the given TStrongRow and
            creates a row for each of the StrongRows in the given StrongRowCollection
            </summary>
            <param name="strongRows">The StrongRows that will be used for the row data for the DataTable.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable``1(UtilityData.Database.Rows.StrongRowCollection{``0},System.Boolean,UtilityData.Database.StrongRowDataTableColumn[])">
            <summary>
            Returns a DataTable with the column names in the given TStrongRow and
            creates a row for each of the StrongRows in the given StrongRowCollection
            </summary>
            <param name="columnsInDataTable">The columns that will be extracted from each StrongRow and will show in the DataTable</param>
            <param name="strongRows">The StrongRows that will be used for the row data for the DataTable.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Returns a DataTable with the column names in the given TStrongRow and
            creates a row for each of the given StrongRows
            </summary>
            <param name="strongRows">The StrongRows that will be used for the row data for the DataTable.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,UtilityData.Database.StrongRowDataTableColumn[])">
            <summary>
            Returns a DataTable with the column names in the given TStrongRow and
            creates a row for each of the given StrongRows
            </summary>
            <param name="columnsInDataTable">The columns that will be extracted from each StrongRow and will show in the DataTable</param>
            <param name="strongRows">The StrongRows that will be used for the row data for the DataTable.</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.DataUtility.ToDataTable``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,UtilityData.Database.StrongRowDataTableColumn[])">
            <summary>
            Returns a DataTable with the column names in the given TStrongRow and
            creates a row for each of the given StrongRows
            </summary>
            <param name="dataTableName"></param>
            <param name="strongRows">The StrongRows that will be used for the row data for the DataTable.</param>
            <param name="columnsInDataTable">The columns that will be extracted from each StrongRow and will show in the DataTable</param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.HavingValue.#ctor(UtilityData.SQL.SQLFunction,UtilityData.SQL.ISQLVariables.SQLValue)">
            <summary>
            Defaults to "="
            </summary>
            <param name="havingFunction"></param>
            <param name="columnOfValue"></param>
            <param name="value"></param>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.HavingValue.HavingFunction">
            <summary>
            The Function (containing the Column) that this HAVING clause
            will use
            
            For instance:
            HAVING aggregate_function(column_name) (operator Value)
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.HavingValue.Values">
            <summary>
            The Values to be used in the HAVING operator.
            </summary>
        </member>
        <member name="M:UtilityData.Normalization.NormalizePhoneNumber(System.String,System.String@,System.String@)">
            <summary>
            Returns true if the phone number was normalized fine
            Returns false if the phone number was invalid and could
            not be normalized
            
            The normalization will break up the phone to its phone base 
            (its 11 integer digits starting with 1) and its 
            extension (whichever digits are left over)
            
            If the phone number is empty, we consider that normalized
            </summary>
            <param name="phoneNumber"></param>
            <param name="normalizedPhoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.StrongRowDataTableColumn.#ctor(UtilityData.Database.Rows.StrongRowColumn)">
            <summary>
            Uses strongRowColumn.Column.DisplayText
            </summary>
            <param name="strongRowColumn"></param>
        </member>
        <member name="T:UtilityData.Database.ValueBaseType">
            <summary>
            Indicates whether a value is basically a Number, a String, a Date, etc.
            </summary>
        </member>
        <member name="T:UtilityData.Database.RelationshipType">
            <summary>
            Indicates the relationship from one table (that has a ForeignColumnKey) to
            another table (that is the foreign table).
            </summary>
        </member>
        <member name="T:UtilityData.Database.Column">
            <summary>
            Columns do not hold values. They are definitions of fields.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Data.SqlDbType)">
            <summary>
            CREATES A PRIMARY COLUMN ONLY
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="sqlValueType"></param>
            <param name="isIncrementingIdentity">This is only applicable if the Column is a Primary Column.
            If true, indicates that the column is an IDENTITY column that increments its value
            automatically as new rows are added</param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Data.SqlDbType,System.Object)">
            <summary>
            CREATES A PRIMARY COLUMN ONLY
            with a default value
            </summary>
            <param name="name"></param>
            <param name="isIncrementingIdentity"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,UtilityData.Database.Column,UtilityData.Database.RelationshipType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Only use this constructor of this column is a Foreign Key. (ColumnType will automatically be set to ForeignKey).
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
            <param name="foreignColumnReference"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
            <param name="isReferenceColumnAnEnumColumn"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,UtilityData.Database.Column,UtilityData.Database.RelationshipType,UtilityData.SQL.JoinType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Only use this constructor of this column is a Foreign Key. (ColumnType will automatically be set to ForeignKey).
            
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="valueType"></param>
            <param name="foreignColumnReference">Assuming that this column is a foreign key, this is the column that the foreign
            key references.</param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
            <param name="onlyAcceptsValuesInReferenceColumn">This can only be true if this column is a ForeignKeyColumn. Indicates whether the values of this Column are constrained to the values in the Table of the foreignColumnReference column.</param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,System.Object,UtilityData.Database.Column,UtilityData.Database.RelationshipType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Only use this constructor of this column is a Foreign Key. (ColumnType will automatically be set to ForeignKey).
            AND
            If the column has a Default Value
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
            <param name="defaultValue"></param>
            <param name="foreignColumnReference"></param>
            <param name="?"></param>
            <param name="joinTypeToForeignColumn"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
            <param name="isReferenceColumnAnEnumColumn"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,System.Object,UtilityData.Database.Column,UtilityData.Database.RelationshipType,UtilityData.SQL.JoinType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Only use this constructor of this column is a Foreign Key. (ColumnType will automatically be set to ForeignKey).
            AND
            If the column has a Default Value
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
            <param name="foreignColumnReference"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
            <param name="isReferenceColumnAnEnumColumn"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,System.Object,UtilityData.Database.ColumnType,System.Boolean,System.Boolean)">
            <summary>
            Only used if the Column HAS a Default Value
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
            <param name="defaultvalue"></param>
            <param name="columnType"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.String,System.String,System.Boolean,System.Data.SqlDbType,UtilityData.Database.ColumnType,System.Boolean,System.Boolean)">
            <summary>
            Column does NOT have a Default Value
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="description"></param>
            <param name="availableInEndUserReports"></param>
            <param name="sqlValueType"></param>
            <param name="columnType"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
        </member>
        <member name="M:UtilityData.Database.Column.#ctor(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Data.SqlDbType,UtilityData.Database.Column,UtilityData.Database.ColumnType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object,UtilityData.SQL.JoinType,UtilityData.Database.RelationshipType)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="displayText"></param>
            <param name="sqlValueType"></param>
            <param name="foreignColumnReference"></param>
            <param name="columnType"></param>
            <param name="canBeNull"></param>
            <param name="unique"></param>
            <param name="onlyAcceptsValuesInReferenceColumn">This can only be true if this column is a ForeignKeyColumn. Indicates whether the values of this Column are constrained to the values in the Table of the foreignColumnReference column.</param>
            <param name="JoinTypeToForeignColumn">only applicable if this is a foreign key column</param>
        </member>
        <member name="M:UtilityData.Database.Column.GetDatabaseValues">
            <summary>
            Gets a list of the values contained in this Column in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Column.UpdateAcceptableValues">
            <summary>
            If this Column has a ValueDomainConstraint,
            this will update the AcceptableValues.
            
            This should only be used once a database connection has been made.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Column.GetEmptyValue">
            <summary>
            Gets the "empty" value of this column.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Column.CreateColumnValue(System.Object)">
            <summary>
            Uses TableDefinition.StandardTableAlias as the table alias
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Column.WhereEquals(System.Object)">
            <summary>
            Uses TableDefinition.StandardTableAlias
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Column.Name">
            <summary>
            The name of this column in the database
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.DisplayText">
            <summary>
            The text that will appear when this Column
            is drawn on the screen.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.Description">
            <summary>
            A description of the Column. When creating dynamic reports, the user will want to know what
            this column is and why they would want it.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.SQLValueType">
            <summary>
            The SQL Type of the values that will be stored
            in this column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.ValueBaseType">
            <summary>
            Indicates whether the ValueType is basically a Number, a String, a Date, etc.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.ValueType">
            <summary>
            The Type of the values that will be stored in this column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.Unique">
            <summary>
            Indicates whether this column's values must be unique
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.ForeignColumnReference">
            <summary>
            If this column is a foreign key, this is the column that the foreign
            key references.
            
            Null if column is not foreign key.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.FullName">
            <summary>
            The full name of this column (The table full name plus this column's name).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.TableAndColumnName">
            <summary>
            The table name plus the column name: "TableName.ColumnName"
            
            Note that this is different than the column's Full Name
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.Index">
            <summary>
            The index of this Column in the Table
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.IsIncrementingIdentity">
            <summary>
            This is only applicable if the Column is a Primary Column.
            If true, indicates that the column is an IDENTITY column that increments its value
            automatically as new rows are added
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.HasValueDomainConstraint">
            <summary>
            Indicates whether the values of this Column are constrained to the values in this.AcceptableValueDomain.
            
            This can only be true if this column is a ForeignKeyColumn. 
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.IsEnumColumn">
            <summary>
            Indicates whether this Column is an enum column (i.e. stores Enum values).
            
            This is only applicable to Primary Key Columns.
            
            If a primary key column is a String and is NOT an Incrementing Identity
            then it IS an Enum Column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.IsReferenceColumnAnEnumColumn">
            <summary>
            Only applicable if this column is a ForeignKey Column.
            
            Indicates whether the ForeignColumnReference is an EnumColumn
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.AcceptableValueDomain">
            <summary>
            If HasValueDomainConstraint is true, this List contains the acceptable values that a row Ran use for
            its Value in this Column.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.AvailableInEndUserReports">
            <summary>
            Indicates whether this column will be available for an Application end-user to select on a
            customizable report.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.HasDefaultValue">
            <summary>
            Indicates whether the Column has a default value if one is not provided
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.DefaultValue">
            <summary>
            The default value of the Column.
            Only used if HasDefaultValue is true
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.JoinTypeToForeignColumn">
            <summary>
            Only applicable if this Column is a ForeignKey Column
            </summary>
        </member>
        <member name="P:UtilityData.Database.Column.RelationToForeignTable">
            <summary>
            Only applicable if this column is a ForeignKey column.
            
            Indicates the relationship from this column's table to
            the foreign table (the table of ForeignColumnReference)
            </summary>
        </member>
        <member name="M:UtilityData.SQL.TransactionErrorEventArgs.#ctor(UtilityData.SQL.TransactionError)">
            <summary>
            
            </summary>
            <param name="transactionError">The transaction error that just occurred</param>
        </member>
        <member name="P:UtilityData.SQL.TransactionErrorEventArgs.TransactionError">
            <summary>
            The transaction error that just occurred
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLTransactionErrorLog">
            <summary>
            The Log of all of the failed or rolled back SQL Transactions since the start of the program
            </summary>
        </member>
        <member name="T:UtilityData.SQL.SQLElementRaw">
            <summary>
            A SQLElementRaw contains the results of evaluating a single SQLElement (i.e.
            the resulting command text and parameters).
            
            We can store the evaluated results so that we don't have to continue
            re-evaluating the SQLElements them each time we want to perform a query or non-query.
            This will help performance.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.GetSQLConnection">
            <summary>
            Returns the SQLConnection used to execute this SQLElementRaw
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.ToSQL(System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Converts this SQLElementRaw into a SQL statement that can be
            used in a Query or non-Query. Appends all of the commands and
            parameters from any succeeding clauses.
            </summary>
            <param name="indexOfVariable"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.Clone">
            <summary>
            Creates a deep copy of only THIS SQLElementRaw without the parent or clause.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.SelectTop(System.Int32)">
            <summary>
            Modifies the SELECT statement in this SQLElementRaw so that it Selects the top "numberOfTopRecordsToSelect" number of records.
            
            (Replaces "SELECT" with "SELECT TOP [numberOfTopRecordsToSelect]")
            </summary>
            <param name="numberOfTopRecordsToSelect">The number of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.SelectPercentage(System.Int32)">
            <summary>
            Modifies the SELECT statement in this SQLElementRaw so that it Selects the top "percentageOfRecordsToSelect" percent of records.
            
            (Replaces "SELECT" with "SELECT TOP [numberOfTopRecordsToSelect] PERCENT")
            </summary>
            <param name="percentageOfRecordsToSelect">The percentage of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.SelectDistinctTop(System.Int32)">
            <summary>
            Modifies the SELECT statement in this SQLElementRaw so that it Selects the distinct top "numberOfTopRecordsToSelect" number of records.
            
            (Replaces "SELECT" with "SELECT DISTINCT TOP [numberOfTopRecordsToSelect]")
            </summary>
            <param name="numberOfTopRecordsToSelect">The number of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.SQL.SQLElementRaw.SelectDistinctPercentage(System.Int32)">
            <summary>
            Modifies the SELECT statement in this SQLElementRaw so that it Selects the distinct top "percentageOfRecordsToSelect" percent of records.
            
            (Replaces "SELECT" with "SELECT DISTINCT TOP [numberOfTopRecordsToSelect] PERCENT")
            </summary>
            <param name="percentageOfRecordsToSelect">The percentage of records to select when the query is run.</param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.SQLElementRaw.Parameters">
            <summary>
            The parameters used in the SQL Command.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.SQLElementRaw.Command">
            <summary>
            The SQL Command (the query or non-query)
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.WhereOperatorValueType">
            <summary>
            The type of the WHERE Value
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.Equals">
            <summary>
            If the type is WhereValue.Value then the WHERE statement
            will generated as "WHERE Column=Value"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.NotEquals">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.IsNull">
            <summary>
            If the type is WhereValue.IsNull then the WHERE statement
            will generated as "WHERE Column IS NULL"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.IsNotNull">
            <summary>
            If the type is WhereValue.IsNotNull then the WHERE statement
            will generated as "WHERE Column IS NOT NULL"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.Between">
            <summary>
            If the type is WhereValue.Between then Value and Value2
            will be used in the WHERE statement and generated as 
            "WHERE Column BETWEEN Value AND Value2"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.NotBetween">
            <summary>
            If the type is WhereValue.NotBetween then Value and Value2
            will be used in the WHERE statement and generated as 
            "WHERE Column NOT BETWEEN Value AND Value2"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.GreaterThan">
            <summary>
            WHERE Column > Value
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.In">
            <summary>
            The IN operator allows you to specify multiple values in a WHERE clause.
            
            Now we want to select the persons with a last name equal to "Hansen" or "Pettersen" from the table above.
            SELECT * FROM Persons WHERE LastName IN ('Hansen','Pettersen')
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereOperatorValueType.Like">
            <summary>
            The LIKE operator is used to search for a specified pattern in a column.
            
            WHERE column_name LIKE pattern
            
            WHERE City LIKE '%viejo'
            WHERE City LIKE '%iej%'
            WHERE City LIKE 'Los%'
            
            
            If you create a WhereValue with a Like Operator, then the Values List of SQLValue
            should have only 1 SQLValue and the SQLColumn can be empty. The Value within the
            SQLValue can be a string of the pattern.
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereLogicOperator.END">
            <summary>
            Indicates that the corresponding WhereValue is the end of the Where Element.
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.WhereValueBracket">
            <summary>
            If not None, used to begin or end
            a group of WhereValues in a Where Element.
            
            For example:
            (name='bob' OR alias='robert') AND (type='new' OR type='friendly')
            
            The WhereValues in the above are:
            name='bob' OR
            alias='robert' AND
            type='new' OR
            type='friendly' END
            
            the first has a WhereValueBracket of "Open"
            the second has a WhereValueBracket of "Close"
            the third has a WhereValueBracket of "Open"
            the fourth has a WhereValueBracket of "Close"
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereValueBracket.Open">
            <summary>
            Occurs before the WhereColumn in a WhereValue
            
            i.e.
            (name='bob' OR
            </summary>
        </member>
        <member name="F:UtilityData.SQL.ISQLVariables.WhereValueBracket.Close">
            <summary>
            Occurs after the Value and before a WhereLogicOperator in a WhereValue
            
            i.e.
            name='bob') OR
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.WhereValue">
            <summary>
            A value that should only be used with WHERE clauses
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.WhereValue.#ctor(UtilityData.Database.Column,System.Object,UtilityData.Database.Rows.Row)">
            <summary>
            Uses the TableDefinition.StandardTableAlias.
            Do not use with multiple tables.
            </summary>
            <param name="whereColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.WhereValue.GetWHEREOperator(UtilityData.SQL.ISQLVariables.WhereOperatorValueType,UtilityData.SQL.ISQLVariables.SQLColumn,System.Collections.Generic.List{UtilityData.SQL.ISQLVariables.ISQLValueOrFunction},System.Int32@,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@)">
            <summary>
            Gets the WHERE Operator (i.e. =@parameter, @parameter IS NULL, @parameter IS NOT NULL,
            BETWEEN @parameter1 AND @parameter2, NOT BETWEEN @parameter1 AND @parameter2,
            > @parameter1, lessThan @parameter2, etc. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.WhereValue.WhereColumn">
            <summary>
            The Column being compared in this WHERE clause.
            For instance, in the form:
            foreigner.name='bob'
            name would be the WhereColumn.
            
            Perhaps 'bob' belongs to a name column belonging to a 
            Friends table (a different column than the name column
            belonging to the Foreigner table).
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.WhereValue.Values">
            <summary>
            The Values to be used in the WHERE operator.
            </summary>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.WhereValue.LogicOperator">
            <summary>
            Follows this WhereValue
            
            For instance:
            WhereColumn=WhereValue [LOGIC OPERATOR]
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.UnionValue">
            <summary>
            The UNION operator is used to combine the result-set of two or more SELECT statements.
            
            Notice that each SELECT statement within the UNION must have the same number of columns. The columns must also have similar data types. Also, the columns in each SELECT statement must be in the same order.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.UnionValue.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="all">The UNION operator selects only distinct values by default (false) To allow duplicate values, use UNION ALL (true)</param>
        </member>
        <member name="P:UtilityData.SQL.ISQLVariables.UnionValue.All">
            <summary>
            The UNION operator is used to combine the result-set of two or more SELECT statements.
            
            The UNION operator selects only distinct values by default (false). To allow duplicate values, use UNION ALL (true)
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.StrongRow">
            <summary>
            A StrongRow is simply a container
            for a Row where the Row values will
            be accessed through strong-typing.
            
            It will have properties inside of it
            to access all of the Row's values by
            Column name.
            
            
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            For Example, let's say we have 3 tables: BusinessPartner, BusinessPartnerDepartment and Address.
            
            If we started with a BusinessPartnerDepartmentRow, we would actually want to create a completely
            new StrongRow of BusinessPartnerRow and then use that as the "root" StrongRow.
            
            To access the AddressRow StrongRow, we would NOT pass in a new instance of an AddressRow.
            Instead, we would access it as: BusinessPartnerRow.BusinessPartnerDepartmentRow.AddressRow.
            
            
            
            When Joining StrongRows, you must Join StrongRow 1 to 2 and 2 to 3 before joining 1 to 3.
            For instance, if you have PropertyRow.AddressRow.CityRow
            You can't fill the CityRow until you do
            SelectFrom(PropertyRow).InnerJoinOn(AddressRow) then you can do InnerJoinOn(CityRow)
            
            
            
            There are basically 3 types of StrongRows.
            1) Root Strong Row (The first StrongRow in a chain of StrongRows).
            2) Foreign Strong Row (The given StrongRow has foreign key columns referring to a Foreign Strong Row (through the reference to a Foreign Column))
            3) Foreign Key Strong Row (In relation to the given StrongRow, this is a Strong Row that contains foreign key columns that refer to the given Strong Row (through the reference to a column in the given StrongRow (i.e. a Foreign Column)))
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyValueOfRowChanged(UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs)">
            <summary>
            Raised when one of the properties (including the actual ForeignStrongRow properties) of this StrongRow changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyValueOfForeignStrongRowChanged(UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs)">
            <summary>
            Raised when one of the ForeignStrongRowValue's "AnyValueOfRowOrForeignRowOrForeignKeyRowChanged" is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyValueOfForeignKeyToStrongRowChanged(UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs)">
            <summary>
            Raised when one of the ForeignKeyStrongRowValue's "AnyValueOfRowOrForeignRowOrForeignKeyRowChanged" is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyValueOfRowOrForeignRowOrForeignKeyRowChanged(UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs)">
            <summary>
            Raised when "AnyValueOfForeignRowChanged" is raised or "AnyValueOfForeignKeyRowValueChanged"
            or "AnyValueOfRowChanged" is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyForeignStrongRowValueInRowChanged(UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs)">
            <summary>
            Raised when a ForeignStrongRow value in this StrongRow has changed (i.e. the actual Foreign StrongRow
            was changed).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyForeignKeyStrongRowValueInRowChanged(UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs)">
            <summary>
            Raised when a ForeignKeyStrongRow value in this StrongRow has changed (i.e. the actual ForeignKey StrongRow
            was changed).
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnAnyNonRowValueInRowChanged(UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs)">
            <summary>
            Raised when a value in this StrongRow (where the value was NOT a ForeignStrongRow)  AND
            was NOT a ForeignKeyStrongRow) has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.OnPrimaryKeyValueChanged(UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs)">
            <summary>
            Raised when a primary key of this StrongRow has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.#ctor(UtilityData.Database.Tables.TableDefinition)">
            <summary>
            Initializes this.Row if it is null.
            Sets TableAlias to tableDefinition.TableAlias
            
            Also initializes this.ForeignStrongRowTableAliases
            
            </summary>
            <param name="tableDefinition"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.#ctor(UtilityData.Database.Tables.TableDefinition,System.String)">
            <summary>
            Initializes this.Row if it is null.
            
            Also initializes this.ForeignStrongRowTableAliases
            </summary>
            <param name="tableDefinition"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.#ctor(System.String)">
            <summary>
            Initializes this.ForeignStrongRowTableAliases
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyValueOfForeignKeyToStrongRowChanged(System.Object,UtilityData.Database.Rows.AnyValueOfForeignKeyToStrongRowChangedEventArgs)">
            <summary>
            Sets HasAnyValueOfForeignKeyToStrongRowChanged to true whenever 
            Any Value Of Foreign Key Strong Row Changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyForeignKeyStrongRowValueInRowChanged(System.Object,UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs)">
            <summary>
            Sets HasAnyForeignKeyStrongRowValueInRowChanged to true whenever
            Any Foreign Key Strong Row Value In Row Changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_PrimaryKeyValueChanged(System.Object,UtilityData.Database.Rows.PrimaryKeyValueChangedEventArgs)">
            <summary>
            Sets HasPrimaryKeyValueChanged to true whenever a primary key value in this StrongRow
            has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyNonRowValueInRowChanged(System.Object,UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs)">
            <summary>
            Sets HasAnyNonRowValueInRowChanged to true whenever
            Any Non-Foreign StrongRow value AND non-ForeignKey StrongRow value in this StrongRow has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyForeignStrongRowValueInRowChanged(System.Object,UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs)">
            <summary>
            Sets HasAnyForeignStrongRowValueInRowChanged to true whenever
            Any Foreign Strong Row Value In Row Changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyValueOfForeignStrongRowChanged(System.Object,UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs)">
            <summary>
            Sets HasAnyValueOfForeignStrongRowChanged to true whenever 
            Any Value Of Foreign Strong Row Changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyValueOfRowChanged(System.Object,UtilityData.Database.Rows.AnyValueOfRowChangedEventArgs)">
            <summary>
            Sets HasAnyValueOfRowChanged to true whenever Any Value Of Row Changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.StrongRow_AnyValueOfRowOrForeignRowOrForeignKeyRowChanged(System.Object,UtilityData.Database.Rows.AnyValueOfRowOrForeignRowOrForeignKeyRowChangedEventArgs)">
            <summary>
            Sets HasAnyValueOfRowOrForeignRowOrForeignKeyRowChanged to true whenever 
            Any Value Of Row Or Value Of Foreign Row Changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyForeignKeyStrongRowValueInRowChangedFlag">
            <summary>
            Sets the HasAnyForeignKeyStrongRowValueInRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no ForeignKeyStrongRow value in 
            this StrongRow has changed (i.e. no actual ForeignKey StrongRow property
            has changed).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasPrimaryKeyValueChangedFlag">
            <summary>
            Sets the HasPrimaryKeyValueChanged flag to false. 
            This essentially "resets" the StrongRow to indicate
            that no primary key value has changed since this
            StrongRow's creation.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyValueOfRowChangedFlag">
            <summary>
            Sets the HasAnyValueOfRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no row value has changed since this 
            StrongRow's creation.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyValueOfRowOrForeignRowOrForeignKeyRowChangedFlag">
            <summary>
            Sets the HasAnyValueOfRowOrForeignRowOrForeignKeyRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no row value or foreign row value has changed since 
            this StrongRow's creation.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyValueOfForeignKeyToStrongRowChangedFlag">
            <summary>
            Sets the HasAnyValueOfForeignKeyToStrongRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no value in a ForeignKey StrongRow has changed since 
            this StrongRow's creation.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyValueOfForeignStrongRowChangedFlag">
            <summary>
            Sets the HasAnyValueOfForeignStrongRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no value in a Foreign StrongRow has changed since 
            this StrongRow's creation.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyForeignStrongRowValueInRowChangedFlag">
            <summary>
            Sets the HasAnyForeignStrongRowValueInRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate
            that no ForeignStrongRow value in 
            this StrongRow has changed (i.e. no actual Foreign StrongRow property
            has changed).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetHasAnyNonRowValueInRowChangedFlag">
            <summary>
            Sets the HasAnyNonRowValueInRowChanged flag to false.
            This essentially "resets" the StrongRow to indicate that
            no value in this StrongRow (where the value was NOT 
            a ForeignStrongRow and was NOT a ForeignKeyStrongRow) has changed.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetAllHasAnyValueChangedFlags">
            <summary>
            Calls
            this.ResetHasAnyForeignStrongRowValueInRowChangedFlag();
            this.ResetHasAnyNonRowValueInRowChangedFlag();
            this.ResetHasAnyValueOfForeignStrongRowChangedFlag();
            this.ResetHasAnyValueOfRowChangedFlag();
            this.ResetHasAnyValueOfRowOrForeignRowOrForeignKeyRowChangedFlag();
            this.ResetHasPrimaryKeyValueChangedFlag();
            this.ResetHasAnyForeignKeyStrongRowValueInRowChangedFlag();
            this.ResetHasAnyValueOfForeignKeyToStrongRowChangedFlag();
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ResetAllThisAndChildrenHasAnyValueChangedFlags">
            <summary>
            Calls ResetAllHasAnyValueChangedFlags() for this StrongRow and for all children Foreign StrongRows and Foreign Key Strong Rows that are not null.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetAllStrongRowColumns">
            <summary>
            Gets all of the StrongRowColumns in this StrongRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetAllStrongRowForeignKeyColumns">
            <summary>
            Gets all of the StrongRowForeignKeyColumns in this StrongRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetAllForeignKeyToThisStrongRowColumns">
            <summary>
            Gets all of the ForeignKeyToThisStrongRowColumn in this StrongRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetTableDefinition">
            <summary>
            Retrieves the table definition of this IStrongRow
            without fail. (i.e. the returned TableDefinition CANNOT be null).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.InitializeChildStrongRows">
            <summary>
            Initializes all of the Foreign Strong Rows and ForeignKeyStrongRows in this StrongRow that
            are currently null.
            Calls the parameterless constructor for each Strong Row that is null.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetTableAliasesFromRoot">
            <summary>
            Returns the table aliases starting from the Root StrongRow
            down to this StrongRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetTableAliasesFromRoot(UtilityData.Database.Rows.StrongRow@)">
            <summary>
            Returns the table aliases starting from the Root StrongRow
            down to this StrongRow
            
            out's the root StrongRow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetTableAliasesFromRoot(System.Collections.Generic.List{UtilityData.Database.Rows.StrongRow}@)">
            <summary>
            Returns the table aliases starting from the Root StrongRow
            down to this StrongRow
            </summary>
            <param name="parentStrongRows">Contains all of the StrongRows that are parents or parents of parents to
            this child StrongRow (this will be empty if this StrongRow is the root).
            
            If THIS StrongROw is NOT the Root StrongRow, then the Root StrongRow will be the first element.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetUniqueTableAliasInChain">
            <summary>
            Gets The TableAlias used to join this StrongRow to another StrongRow.
            This TableAlias will be completely unique in any chain of StrongRows in which it exists.
            The returned TableAlias will be compressed.
            
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            This TableAlias is completely unique for this StrongRow
            in its chain of StrongRows.
            
            Although this TableAlias is completely unique, it will not
            change at any time as long as it belongs to the same chain
            and is referenced through the use of the same parent StrongRows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetUniqueTableAliasInChainCompressed">
            <summary>
            Gets The TableAlias used to join this StrongRow to another StrongRow.
            This TableAlias will be completely unique in any chain of StrongRows in which it exists.
            The returned TableAlias will be compressed.
            
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            This TableAlias is completely unique for this StrongRow
            in its chain of StrongRows.
            
            Although this TableAlias is completely unique, it will not
            change at any time as long as it belongs to the same chain
            and is referenced through the use of the same parent StrongRows.
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetStrongRowTableAlias(UtilityData.Database.Rows.StrongRow)">
            <summary>
            Retrieves the TableAlias for the specified ForeignStrongRow or ForeignKeyStrongRow.
            
            The StrongRow MUST be a ForeignStrongRow or ForeignKeyStrongRow of THIS class.
            
            Returns null if the given StrongRow does not belong to this StrongRow.
            </summary>
            <param name="strongRow">The given StrongRow MUST belong to THIS class.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.TryGetStrongRowFromTableAlias(System.String,UtilityData.Database.Rows.StrongRow@)">
            <summary>
            Attempts to retrieve the ForeignStrongRow or ForeignKeyStrongRow that has the
            given TableAlias as found in the OtherRowTableAliases
            dictionary.
            </summary>
            <param name="tableAlias">The tableAlias of the ForeignStrongRow or ForeignKeyStrongRow to find.</param>
            <param name="strongRow">If function returned true, this is the ForeignStrongRow or
            ForeignKeyStrongRow with
            the given tableAlias that belongs to this StrongRow.
            
            If returning false, this will be null.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.TryGetStrongRowFromCompressedTableAlias(System.String,UtilityData.Database.Rows.StrongRow@)">
            <summary>
            Attempts to retrieve the ForeignStrongRow or ForeignKeyStrongRow that has the
            given compressed TableAlias as found by compressing each table alias in the OtherRowTableAliases
            dictionary.
            </summary>
            <param name="compressedTableAlias">The compressed tableAlias of the ForeignStrongRow or ForeignKeyStrongRow to find.</param>
            <param name="strongRow">If function returned true, this is the ForeignStrongRow or
            ForeignKeyStrongRow with
            the given compressed tableAlias that belongs to this StrongRow.
            
            If returning false, this will be null.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.TryParseColumnAndAliasesFromDisplayName(System.String,System.String@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Given a column display name as it was returned in a SQL Select query (i.e. the
            name of the column that was returned), parses the
            table aliases from the display name and parses the actual Column name that was
            selected.
            
            All Column Display Names for StrongRows follow the format "tableAlias.tableAlias...tableAlias.tableAlias.ColumnName"
            Each tableAlias indicates the tableAlias of a StrongRow. The first tableAlias is the root StrongRow and the last
            tableAlias is the deepest child that contains the column.
            
            Returns null if returning false.
            </summary>
            <param name="columnDisplayName">A column display name as it was returned in a SQL Select query (i.e. the
            name of the column that was returned)</param>
            <param name="columnName">The column name of the column that belongs to the StrongRow that has the last tableAlias in the
            returned tableAliases</param>
            <param name="tableAliases">Each tableAlias indicates the tableAlias of a StrongRow. The first tableAlias is the root StrongRow and the last
            tableAlias is the deepest child that contains the column.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.ParseColumnAndAliasFromDisplayName(System.String,System.String@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Given a column display name as it was returned in a SQL Select query (i.e. the
            name of the column that was returned), parses the
            table alias from the display name and parses the actual Column name that was
            selected.
            
            All Column Display Names for StrongRows follow the format "tableAlias.tableAlias...tableAlias.tableAlias.ColumnName"
            Each tableAlias indicates the tableAlias of a StrongRow. The first tableAlias is the root StrongRow and the last
            tableAlias is the deepest child that contains the column.
            
            Throw exception on failure.
            </summary>
            <param name="columnDisplayName">A column display name as it was returned in a SQL Select query (i.e. the
            name of the column that was returned)</param>
            <param name="columnName">The column name of the column that belongs to the StrongRow that has the last tableAlias in the
            returned tableAliases</param>
            <param name="tableAlias">Each tableAlias indicates the tableAlias of a StrongRow. The first tableAlias is the root StrongRow and the last
            tableAlias is the deepest child that contains the column.</param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetColumnsAsSQLColumns(System.Boolean)">
            <summary>
            Gets all of the Columns in this StrongRow as SQLColumns.
            Sets the DisplayName for each Column to the appropriate DisplayName so that
            they can be appropriately parsed from a QueryResult.
            </summary>
            <param name="compressTableAliases">If true, all of the TableAliases of the SQLColumns will be compressed</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetColumnsAsSQLColumns(System.Boolean,System.String@)">
            <summary>
            Gets all of the Columns in this StrongRow as SQLColumns.
            Sets the DisplayName for each Column to the appropriate DisplayName so that
            they can be appropriately parsed from a QueryResult.
            </summary>
            <param name="tableAlias">The TableAlias used for each of the SQLColumns</param>
            <param name="compressTableAliases">If true, all of the TableAliases of the SQLColumns will be compressed</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetColumnsAsSQLColumns(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Boolean)">
            <summary>
            Gets the specified Columns in this StrongRow as SQLColumns.
            Sets the DisplayName for each Column to the appropriate 
            </summary>
            <param name="columns"></param>
            <param name="compressTableAliases">If true, all of the TableAliases of the SQLColumns will be compressed</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetColumnsAsSQLColumns(System.Collections.Generic.IEnumerable{UtilityData.Database.Column},System.Boolean,System.String@)">
            <summary>
            Gets the specified Columns in this StrongRow as SQLColumns.
            Sets the DisplayName for each Column to the appropriate DisplayName so that
            they can be appropriately parsed from a QueryResult.
            </summary>
            <param name="tableAlias">The TableAlias used for each of the SQLColumns</param>
            <param name="compressTableAliases">If true, all of the TableAliases of the SQLColumns will be compressed</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetStrongRowAtTableAliases(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            The given IEnumerable of tableAliases will be used as an address to find
            the StrongRow as specified by the tableAliases starting from this StrongRow.
            
            The last TableAlias in the given IEnumerable will be the table alias of the
            StrongRow for which we're looking.
            
            The first table alias must have the same table alias as THIS StrongRow.
            </summary>
            <param name="tableAliases"></param>
            <param name="tableAliasesAreCompressed"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetStrongRowColumn(UtilityData.Database.Rows.StrongRowColumn,System.Boolean)">
            <summary>
            Given a StrongRowColumn from a different StrongRow, gets the corresponding
            StrongRowColumn in THIS StrongRow.
            
            </summary>
            <param name="other"></param>
            <param name="tableAliasesAreCompressed">If true, the table aliases in the specified row are compressed and should be treated as such.</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetNonCompressedAndCompressedTableAliases">
            <summary>
            Given a list of parent strong rows, returns the strong row's Non-compressed TableAlias (Item1)
            and the compressed TableAlias (Item2)
            
            Calculates the parent Strong Rows to determine the table aliases.
            </summary>
            <returns>Item1 of Tuple is the non-compressed TableAlias, Item2 of Tuple is CompressedTableAlias</returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.GetNonCompressedAndCompressedTableAliases(System.Collections.Generic.List{UtilityData.Database.Rows.StrongRow},System.Boolean)">
            <summary>
            Given a list of parent strong rows, returns the strong row's Non-compressed TableAlias (Item1)
            and the compressed TableAlias (Item2)
            </summary>
            <param name="parentStrongRows">All of the StrongRows that are parents or parents of parents to
            this child StrongRow (this will be empty if this StrongRow is the root).</param>
            <param name="addThisStrongRow">If true, THIS StrongRow will be added to the returned list of non-compressed and compressed table aliases</param>
            <returns>Item1 of Tuple is the non-compressed TableAlias, Item2 of Tuple is CompressedTableAlias</returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.CompressUniqueTableAliasInChain(System.String,System.Tuple{System.String,System.String})">
            <summary>
            Compresses the given tableAlias so that it is smaller (because SQL queries have a character-count
            max of 128 for column display names).
            </summary>
            <param name="tableAlias">The UniqueTableAliasInChain for the StrongRow to compress</param>
            <param name="nonCompressedAndCompressedTableAlias">The table alias's corresponding strong row's Non-compressed TableAlias (Item1)
            and the compressed TableAlias (Item2) (including the child Strong Row).</param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRow.CompressUniqueTableAliasInChain(System.String[]@,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Compresses the given tableAlias pieces so that they are smaller (because SQL queries have a character-count
            max of 128 for column display names).
            </summary>
            <param name="tableAliasPieces">The non-compressed UniqueTableAliasInChain pieces (for instance, if we had table alias "a.b.c", perhaps
            this is just an array of [] { a, b, c }.</param>
            <param name="nonCompressedAndCompressedTableAliases">Each strong row's Non-compressed TableAlias (Item1)
            and the compressed TableAlias (Item2) (including the child Strong Row).</param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.Row">
            <summary>
            Gets or sets the underlying Row for this StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.Parent">
            <summary>
            If this StrongRow is a ForeignStrongRow (i.e. it is referenced by a foreign key in
            another StrongRow), then this Parent is the StrongRow that is referencing this StrongRow
            (i.e. the StrongRow that contains this StrongRow).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.TableAlias">
            <summary>
            The TableAlias of this StrongRow. Not necessarily unique in the
            chain of the StrongRow. 
            
            The returned TableAlias will be compressed.
            
            If this is the Root StrongRow, the assigned TableAlias will be used.
            If this is a child StrongRow, the TableAlias from the parent's OtherRowTableAliases dictionary
            will be used.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyValueOfRowChanged">
            <summary>
            Raised when one of the values (including one of the instances of the ForeignStrongRows) 
            of this StrongRow changes.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyValueOfForeignStrongRowChanged">
            <summary>
            Raised when one of the values of one of the ForeignStrongRow's changes or one of the ForeignStrongRow's
            children values changes.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyValueOfForeignKeyToStrongRowChanged">
            <summary>
            Raised when one of the values of one of the ForeignKeyStrongRow's changes or one of the ForeignKeyStrongRow's
            children values changes.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyValueOfRowOrForeignRowOrForeignKeyRowChanged">
            <summary>
            Raised when any value of this StrongRow or any value of the children ForeignStrongRows 
            changes.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyForeignStrongRowValueInRowChanged">
            <summary>
            Raised when a ForeignStrongRow value in this StrongRow has changed (i.e. the actual Foreign StrongRow
            was changed).
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyForeignKeyStrongRowValueInRowChanged">
            <summary>
            Raised when a ForeignKeyStrongRow value in this StrongRow has changed (i.e. the actual ForeignKey StrongRow
            was changed).
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.AnyNonRowValueInRowChanged">
            <summary>
            Raised when a value in this StrongRow (where the value was NOT a ForeignStrongRow AND
            was NOT a ForeignKeyStrongRow) has changed.
            </summary>
        </member>
        <member name="E:UtilityData.Database.Rows.StrongRow.PrimaryKeyValueChanged">
            <summary>
            Raised when a primary key of this StrongRow has changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyValueOfForeignKeyToStrongRowChanged">
            <summary>
            If true, indicates that some value in a ForeignKeyStrongRow has 
            changed or some value in a child row of the ForeignKeyStrongRow has changed (and so on) since
            either the StrongRow was constructed or since the last time 
            ResetHasAnyValueOfForeignKeyToStrongRowChangedFlag() or
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyForeignKeyStrongRowValueInRowChanged">
            <summary>
            If true, indicates that a ForeignKeyStrongRow value in 
            this StrongRow has changed (i.e. the actual ForeignKey StrongRow property
            has changed) since either the StrongRow was constructed or since the last time 
            ResetHasAnyForeignKeyStrongRowValueInRowChangedFlag() or
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyValueOfRowChanged">
            <summary>
            If true, indicates that one of the properties (including the actual 
            ForeignStrongRow properties) of this StrongRow has changed since
            either the StrongRow was constructed or since the last time 
            ResetHasAnyValueOfRowChangedFlag() or 
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyValueOfRowOrForeignRowOrForeignKeyRowChanged">
            <summary>
            If true, indicates that any value of this StrongRow or 
            any value of the children ForeignStrongRows has changed since
            either the StrongRow was constructed or since the last time 
            ResetHasAnyValueOfRowOrForeignRowOrForeignKeyRowChangedFlag() or 
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyValueOfForeignStrongRowChanged">
            <summary>
            If true, indicates that some value in a ForeignStrongRow has 
            changed or some value in child row of the ForeignStrongRow has changed (and so on) since
            either the StrongRow was constructed or since the last time 
            ResetHasAnyValueOfForeignStrongRowChangedFlag() or
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyForeignStrongRowValueInRowChanged">
            <summary>
            If true, indicates that a ForeignStrongRow value in 
            this StrongRow has changed (i.e. the actual Foreign StrongRow property
            has changed) since either the StrongRow was constructed or since the last time 
            ResetHasAnyForeignStrongRowValueInRowChangedFlag() or
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasAnyNonRowValueInRowChanged">
            <summary>
            If true, indicates that a value in this StrongRow 
            (where the value was NOT a ForeignStrongRow and was NOT a ForeignKeyStrongRow) has changed since
            either the StrongRow was constructed or since the last time 
            ResetHasAnyNonRowValueInRowChangedFlag() or
            ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.HasPrimaryKeyValueChanged">
            <summary>
            If true, indicates that the value of a primary key in this StrongRow
            has changed since either the StrongRow was constructed or since the last time 
            ResetHasPrimaryKeyValueChangedFlag() or ResetAllHasAnyValueChangedFlags() was called.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.TableDefinition">
            <summary>
            The TableDefinition of this StrongRow
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.Columns">
            <summary>
            The Columns of this StrongRow
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.TableAliasUniqueInChain">
            <summary>
            Gets The TableAlias used to join this StrongRow to another StrongRow.
            This TableAlias will be completely unique in any chain of StrongRows in which it exists.
            
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            This TableAlias is completely unique for this StrongRow
            in its chain of StrongRows.
            
            Although this TableAlias is completely unique, it will not
            change at any time as long as it belongs to the same chain
            and is referenced through the use of the same parent StrongRows.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.TableAliasUniqueInChainCompressed">
            <summary>
            Gets The TableAlias used to join this StrongRow to another StrongRow.
            This TableAlias will be completely unique in any chain of StrongRows in which it exists.
            
            When joining StrongRows, they should all belong to the same "root" StrongRow.
            
            This TableAlias is completely unique for this StrongRow
            in its chain of StrongRows.
            
            Although this TableAlias is completely unique, it will not
            change at any time as long as it belongs to the same chain
            and is referenced through the use of the same parent StrongRows.
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRow.OtherRowTableAliases">
            <summary>
            This will contain the table aliases for each of the Foreign StrongRows
            and for each of the ForeignKey StrongRows in this StrongRow. 
            We can use these table aliases to fill each of the
            Foreign StrongRows and ForeignKey StrongRows in this StrongRow.
            
            For every foreign key in this StrongRow, there will also be an instance
            of a StrongRow that is referenced by the foreign key (i.e. the Foreign
            StrongRow).
            
            There will also be a ForeignKeyStrongRow for every ForeignKey in different tables
            that refer to this StronRow.
            </summary>
        </member>
        <member name="M:UtilityData.Log.Logger.RegisterError(UtilityData.Log.SenderIdentifier,UtilityData.Log.Error)">
            <summary>
            Registers an error with the specified senderIdentifier
            </summary>
            <param name="senderIdentifier">The identifying string of the sender of this error</param>
            <param name="error"></param>
        </member>
        <member name="M:UtilityData.Log.Logger.GetErrors(UtilityData.Log.SenderIdentifier)">
            <summary>
            Given a senderIdentifier, retrieves all of the errors
            that were registered under that senderIdnetifier.
            </summary>
            <param name="senderIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Log.Logger.GetNumberOfErrors(UtilityData.Log.SenderIdentifier)">
            <summary>
            Retrieves how many errors a specified sender has registered
            </summary>
            <param name="senderIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Log.Logger.HasErrors(UtilityData.Log.SenderIdentifier)">
            <summary>
            Indicates whether a specified sender has registered any errors
            </summary>
            <param name="senderIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:UtilityData.Log.Logger.WriteToConsoleWithDate(System.String)">
            <summary>
            Writes a string to the Console proceeded by the current DateTime.
            </summary>
        </member>
        <member name="P:UtilityData.Log.Logger.Errors">
            <summary>
            The key is the identifying string of the sender or group of
            senders of an error or errors.
            A group of senders that can be identified as a group
            can and should have the same identifying string.
            
            Value is a list of the errors.
            </summary>
        </member>
        <member name="P:UtilityData.Log.Logger.UniqueStringGenerator">
            <summary>
            Used to assign an identifying string to a sender or group of
            senders of error(s)
            </summary>
        </member>
        <member name="M:UtilityData.Database.Server.#ctor(System.Collections.Generic.IEnumerable{UtilityData.Database.Database},System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="serverName">The actual name of the SQL Server</param>
            <param name="tables"></param>
        </member>
        <member name="M:UtilityData.Database.Server.#ctor(UtilityData.Database.Database[],System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="serverName">The actual name of the SQL Server</param>
            <param name="tableDefinitions"></param>
        </member>
        <member name="P:UtilityData.Database.Server.Name">
            <summary>
            The actual name of the SQL Server
            </summary>
        </member>
        <member name="P:UtilityData.Database.Server.UserID">
            <summary>
            The UserID to log into the server
            </summary>
        </member>
        <member name="P:UtilityData.Database.Server.Password">
            <summary>
            The password that corresponds with the UserID
            </summary>
        </member>
        <member name="P:UtilityData.Database.Server.Port">
            <summary>
            The port used to connect to the server
            </summary>
        </member>
        <member name="P:UtilityData.Database.Server.ConnectionTimeOut">
            <summary>
            The number of seconds after which the connection attempt to the server will time out
            </summary>
        </member>
        <member name="P:UtilityData.Database.Server.Databases">
            <summary>
            The Databases held on the Server
            </summary>
        </member>
        <member name="M:UtilityData.Database.Views.ViewColumn.#ctor(UtilityData.SQL.ISQLVariables.SQLColumn)">
            <summary>
            Uses column.DisplayText for column header text 
            </summary>
            <param name="sqlColumn"></param>
        </member>
        <member name="M:UtilityData.Database.Views.ViewColumn.#ctor(UtilityData.Database.Column,System.String)">
            <summary>
            Uses column.TableDefinition.TableAlias for table alias
            </summary>
            <param name="column"></param>
            <param name="headerText"></param>
        </member>
        <member name="M:UtilityData.Database.Views.ViewColumn.#ctor(UtilityData.Database.Column)">
            <summary>
            Uses column.TableDefinition.TableAlias for table alias
            Uses column.DisplayText
            </summary>
            <param name="column"></param>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs">
            <summary>
            Used when some value in a ForeignStrongRow has 
            changed or some value in a child row of another
            ForeignStrongRow has changed (and so on).
            
            Raised when a ForeignStrongRow's RowOrForeignRowValueChanged
            is raised.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs.#ctor(System.Object,System.Object,UtilityData.Database.Column,UtilityData.Database.Rows.StrongRow)">
            <summary>
            
            </summary>
            <param name="foreignStrongRow">The ForeignStrongRow whose value changed.</param>
            <param name="previousValue">The value before it was changed.</param>
            <param name="newValue">The new value after it was changed.</param>
            <param name="foreignColumn">The foreign column that held the value that was changed.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs.ForeignStrongRow">
            <summary>
            The ForeignStrongRow whose value changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs.ForeignColumn">
            <summary>
            The foreign column that held the value that was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs.PreviousValue">
            <summary>
            The value before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyValueOfForeignStrongRowChangedEventArgs.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs">
            <summary>
            Used when a ForeignStrongRow value in a StrongRow has changed (i.e. the actual Foreign StrongRow
            was changed).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs.#ctor(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column,UtilityData.Database.Rows.IRow)">
            <summary>
            
            </summary>
            <param name="previousValue">The Foreign StrongRow before it was changed.</param>
            <param name="newValue">The new Foreign StrongRow after it was changed.</param>
            <param name="foreignKeyColumn">The foreign key column that was referring to the Foreign StrongRow.</param>
            <param name="row">The Row whose value changed</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs.ForeignKeyColumn">
            <summary>
            The foreign key column that was referring to the Foreign StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs.PreviousValue">
            <summary>
            The Foreign StrongRow before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs.NewValue">
            <summary>
            The new Foreign StrongRow after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignStrongRowValueInRowChangedEventArgs.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs">
            <summary>
            Used when a ForeignKeyStrongRow value in a StrongRow has changed (i.e. the actual ForeignKey StrongRow
            was changed).
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs.#ctor(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column,UtilityData.Database.Rows.IRow)">
            <summary>
            
            </summary>
            <param name="previousValue">The ForeignKey StrongRow before it was changed.</param>
            <param name="newValue">The new ForeignKey StrongRow after it was changed.</param>
            <param name="foreignKeyColumn">The foreign key column of the ForeignKey StrongRow that refers
            to the parent StrongRow (the StrongRow that contains the ForeignKeyStrongRow).</param>
            <param name="row">The Row whose value changed</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs.ForeignKeyColumn">
            <summary>
            The foreign key column of the ForeignKey StrongRow that refers
            to the parent StrongRow (the StrongRow that contains the ForeignKeyStrongRow).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs.PreviousValue">
            <summary>
            The ForeignKey StrongRow before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs.NewValue">
            <summary>
            The new ForeignKey StrongRow after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyForeignKeyStrongRowValueInRowChangedEventArgs.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs">
            <summary>
            Used when a value in a StrongRow (where the value was NOT a ForeignStrongRow AND NOT a ForeignKeyStrongRow) has changed.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs.#ctor(System.Object,System.Object,UtilityData.Database.Column,UtilityData.Database.Rows.IRow)">
            <summary>
            
            </summary>
            <param name="previousValue">The value before it was changed.</param>
            <param name="newValue">The new value after it was changed.</param>
            <param name="column">The column that held the value that changed.</param>
            <param name="row">The Row whose value changed</param>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs.Column">
            <summary>
            The column that held the value that changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs.PreviousValue">
            <summary>
            The value before it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs.NewValue">
            <summary>
            The new value after it was changed.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.AnyNonRowValueInRowChangedEventArgs.Row">
            <summary>
            The Row whose value changed
            </summary>
        </member>
        <member name="T:UtilityData.SQL.ISQLVariables.SQLData">
            <summary>
            SQLData stores a single piece of data (a string,
            an int, etc.). It is not associated with any 
            column. It is used as an argument for SQLFunctions.
            
            THIS SHOULD ONLY BE USED AS AN ARGUMENT OF A SQLFunction.
            </summary>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLData.#ctor(System.Object)">
            <summary>
            THIS SHOULD ONLY BE USED AS AN ARGUMENT OF A SQLFunction.
            
            DataType will be determined automatically. Use other function to specify
            the exact data type if there are any issues.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UtilityData.SQL.ISQLVariables.SQLData.#ctor(System.Object,System.Data.SqlDbType)">
            <summary>
            THIS SHOULD ONLY BE USED AS AN ARGUMENT OF A SQLFunction.
            </summary>
            <param name="value"></param>
            <param name="dataType"></param>
        </member>
        <member name="T:UtilityData.Database.ExportSpreadsheetDataPiece">
            <summary>
            A Data Piece is a piece of data that can be
            used to create one or multiple ExportSpreadsheetRows
            </summary>
        </member>
        <member name="T:UtilityData.Database.Rows.StrongRowForeignKeyColumn">
            <summary>
            A StrongRowForeignKeyColumn can be used to join
            a StrongRow to one if its ForeignStrongRows.
            
            A StrongRowForeignKeyColumn contains the information
            for each ForeignKey that any given StrongRow contains.
            
            This is for a ForeignKey that belongs to the subject StrongRow
            and will be used to join the subject StrongRow to a ForeignStrongRow.
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRowForeignKeyColumn.#ctor(UtilityData.Database.Rows.StrongRow,UtilityData.Database.Column)">
            <summary>
            Creates a StrongRowForeignKeyColumn that can be used to join
            a StrongRow to one if its ForeignStrongRows.
            </summary>
            <param name="foreignRow">The Strong Row that can be joined to its parent through the use
            of the Foreign Key Column.</param>
            <param name="foreignKeyColumn">The Foreign Key Column that references the ForeignColumn used to
            join the Foreign Row.</param>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignKeyColumn">
            <summary>
            The Foreign Key Column that references the ForeignColumn used to
            join the Foreign Row.
            This is the ForeignKey Column that belongs to the Strong Row.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignColumn">
            <summary>
            The Foreign Column that is referenced by the Foreign Key in order
            to join the Foreign Row.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignRow">
            <summary>
            The Strong Row that can be joined to its parent through the use
            of the Foreign Key Column.
            This is the ForeignStrongRow to which the Strong Row's ForeignKey refers.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignTable">
            <summary>
            The TableToJoin in order to join the ForeignStrongRow with the Parent StrongRow.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignColumnTableAlias">
            <summary>
            The Unique TableAlias of the ForeignTable used for joining (the table alias of the table that 
            contains the Foreign Column -- the table alias of the table to join)
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignColumnTableAliasCompressed">
            <summary>
            The Unique TableAlias of the ForeignTable used for joining (the table alias of the table that 
            contains the Foreign Column -- the table alias of the table to join)
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignKeyColumnTableAlias">
            <summary>
            The Unique TableAlias of the Parent Table for joining (the table alias of the parent table that contains
            the Foreign Key Column).
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.ForeignKeyColumnTableAliasCompressed">
            <summary>
            The Unique TableAlias of the Parent Table for joining (the table alias of the parent table that contains
            the Foreign Key Column).
            
            This TableAlias will be compressed by this StrongRow according to its parents.
            </summary>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowForeignKeyColumn.Parent">
            <summary>
            The Parent StrongRow of the ForeignRow
            </summary>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRowCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="rows">A collection of rows in a single table.</param>
        </member>
        <member name="M:UtilityData.Database.Rows.StrongRowCollection`1.GetValuesInColumn``1(UtilityData.Database.Column)">
            <summary>
            For each row, retrieves the value in the specified column. 
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:UtilityData.Database.Rows.StrongRowCollection`1.TableDefinition">
            <summary>
            The TableDefinition to which each of the StrongRows belongs
            </summary>
        </member>
    </members>
</doc>
